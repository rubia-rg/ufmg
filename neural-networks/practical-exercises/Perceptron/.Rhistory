ylim=c(minseq,maxseq),xlab='',ylab='', add=T)
image(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='', add=T)
##############################################
# Resposta em R2 #
image(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
##############################################
# Resposta em R2 #
image(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',add=T)
par(new=T)
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
image(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',add = T)
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
image(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',add = T)
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
image(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',add = T)
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
image(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',add = T)
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
image(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',add = T)
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
image(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',add = T)
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
image(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',add = T)
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
image(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',add = T)
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
filled.contour(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',)
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
filled.contour(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
filled.contour(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',add=T)
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
filled.contour(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',)
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
filled.contour(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
filled.contour(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
filled.contour(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
filled.contour(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',clab='')
filled.contour(seqi, seqj, M, xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='',clim='')
filled.contour(seqi, seqj, M)
filled.contour(seqi, seqj, M)
filled.contour(seqi, seqj, M,levels = 1)
filled.contour(seqi, seqj, M,levels = 2)
filled.contour(seqi, seqj, M,nlevels = 1)
filled.contour(seqi, seqj, M,nlevels = 2)
filled.contour(seqi, seqj, M,nlevels = 3)
levelplot(seqi,seqj,M)
filled.contour(seqi, seqj, M,)
# Chunk 1
rm(list=ls())
library('plot3D')
##############################################
# Cálculo da resposta do neurônio #
yperceptron <- function(xvec, w, par)
{
if(par == 1)
xvec <- cbind(-1, t(xvec))
u <- xvec %*% w
y <- 1*(u >= 0)
return(as.matrix(y))
}
##############################################
# Treinamento de um Perceptron simples #
trainperceptron <- function(xin, yd, eta, tol, maxepocas, par)
{
dimxin <- dim(xin)
N <- dimxin[1]
n <- dimxin[2]
if(par == 1)
{
wt <- as.matrix(runif(n+1) - 0.5)
xin <- cbind(-1, xin)
}
else
{
wt <- as.matrix(runif(n) - 0.5)
}
nepocas <- 0
eepoca <- tol+1
evec <- matrix(nrow=1, ncol=maxepocas)
while ((nepocas < maxepocas) && (eepoca > tol))
{
ei2 <- 0
xseq <- sample(N)
for(i in 1:N)
{
irand <- xseq[i]
yhati <- as.double((xin[irand,] %*% wt) >= 0)
ei <- yd[irand]- yhati
dw <- eta*ei*xin[irand,]
wt <- wt+dw
ei2 <- ei2+ei*ei
}
nepocas <- nepocas+1
evec[nepocas] <- ei2/N
eepoca <- evec[nepocas]
}
retlist <- list(wt=wt, evec=evec[1:nepocas])
return(retlist)
}
# Chunk 2
##############################################
# Parâmetros #
N <- 100
minseq <- 0
maxseq <- 6
eta <- 0.1
tol <- 0.01
maxepocas <- 10000
par <- 1
##############################################
# Gerando dados amostrados das distribuições m1=(2,2)', m2=(4,4)' #
xc1 <- matrix(rnorm(N*2),ncol=2)*0.5+c(2,2)
xc2 <- matrix(rnorm(N*2),ncol=2)*0.5+c(4,4)
xin <- rbind(xc1,xc2)
##############################################
# Rótulos das entradas #
yd <- rbind(matrix(0, nrow=N, ncol=1), matrix(1, nrow=N, ncol=1))
##############################################
# Plot dos dados #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq), xlab='x_1', ylab='x_2',
sub = 'Dados amostrados')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq), xlab='', ylab='')
# Chunk 3
##############################################
# Treinamento #
train <- list()
train <- trainperceptron(xin,yd,eta,tol,maxepocas,par)
# Vetor de pesos #
w <- train$wt
paste(w)
# Chunk 4
##############################################
# Perceptron  #
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M <- matrix(1,nrow =length(seqi),ncol=length(seqj))
# Percorrer o espaço e gerar a saída #
ci <- 0
for (i in seqi)
{
ci <- ci+1
cj <- 0
for (j in seqj)
{
cj <- cj + 1
xt <- c(i,j)
M[ci,cj] <- yperceptron(xt,w,1)
}
}
# Chunk 5
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
# Chunk 6
##############################################
# Superfície de separação #
persp(seqi,seqj,xlim=c(0,6),ylim=c(0,6),M,theta=-20,phi=80,
sub='Superfície de separação')
# Chunk 7
##############################################
# Superfície de separação + dados amostrados #
ribbon3D(seqi,seqj,M, xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),
zlim=c(0,1), contour=T, add=F, axes=T, ticktype="detailed",
sub='Superfície de separação')
# Dados #
scatter3D(xc1[,1],xc1[,2], matrix(0,nrow=dim(xc1)[1]),add=T,col='red')
scatter3D(xc2[,1],xc2[,2], matrix(0,nrow=dim(xc2)[1]),add=T,col='blue')
setwd("~/Dropbox/Study/UFMG/Classes/ELT075/Prática/Perceptron")
# Chunk 1
rm(list=ls())
library('plot3D')
##############################################
# Cálculo da resposta do neurônio #
yperceptron <- function(xvec, w, par)
{
if(par == 1)
xvec <- cbind(-1, t(xvec))
u <- xvec %*% w
y <- 1*(u >= 0)
return(as.matrix(y))
}
##############################################
# Treinamento de um Perceptron simples #
trainperceptron <- function(xin, yd, eta, tol, maxepocas, par)
{
dimxin <- dim(xin)
N <- dimxin[1]
n <- dimxin[2]
if(par == 1)
{
wt <- as.matrix(runif(n+1) - 0.5)
xin <- cbind(-1, xin)
}
else
{
wt <- as.matrix(runif(n) - 0.5)
}
nepocas <- 0
eepoca <- tol+1
evec <- matrix(nrow=1, ncol=maxepocas)
while ((nepocas < maxepocas) && (eepoca > tol))
{
ei2 <- 0
xseq <- sample(N)
for(i in 1:N)
{
irand <- xseq[i]
yhati <- as.double((xin[irand,] %*% wt) >= 0)
ei <- yd[irand]- yhati
dw <- eta*ei*xin[irand,]
wt <- wt+dw
ei2 <- ei2+ei*ei
}
nepocas <- nepocas+1
evec[nepocas] <- ei2/N
eepoca <- evec[nepocas]
}
retlist <- list(wt=wt, evec=evec[1:nepocas])
return(retlist)
}
# Chunk 2
##############################################
# Parâmetros #
N <- 100
minseq <- 0
maxseq <- 6
eta <- 0.1
tol <- 0.01
maxepocas <- 10000
par <- 1
##############################################
# Gerando dados amostrados das distribuições m1=(2,2)', m2=(4,4)' #
xc1 <- matrix(rnorm(N*2),ncol=2)*0.5+c(2,2)
xc2 <- matrix(rnorm(N*2),ncol=2)*0.5+c(4,4)
xin <- rbind(xc1,xc2)
##############################################
# Rótulos das entradas #
yd <- rbind(matrix(0, nrow=N, ncol=1), matrix(1, nrow=N, ncol=1))
##############################################
# Plot dos dados #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq), xlab='x_1', ylab='x_2',
sub = 'Dados amostrados')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq), xlab='', ylab='')
# Chunk 3
##############################################
# Treinamento #
train <- list()
train <- trainperceptron(xin,yd,eta,tol,maxepocas,par)
# Vetor de pesos #
w <- train$wt
paste(w)
# Chunk 4
##############################################
# Perceptron  #
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M <- matrix(1,nrow =length(seqi),ncol=length(seqj))
# Percorrer o espaço e gerar a saída #
ci <- 0
for (i in seqi)
{
ci <- ci+1
cj <- 0
for (j in seqj)
{
cj <- cj + 1
xt <- c(i,j)
M[ci,cj] <- yperceptron(xt,w,1)
}
}
# Chunk 5
##############################################
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2',
sub = 'Resposta do Perceptron Simples')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M,xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
# Chunk 6
##############################################
# Superfície de separação #
persp(seqi,seqj,xlim=c(0,6),ylim=c(0,6),M,theta=-20,phi=80,
sub='Superfície de separação')
# Chunk 7
##############################################
# Superfície de separação + dados amostrados #
ribbon3D(seqi,seqj,M, xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),
zlim=c(0,1), contour=T, add=F, axes=T, ticktype="detailed",
sub='Superfície de separação')
# Dados #
scatter3D(xc1[,1],xc1[,2], matrix(0,nrow=dim(xc1)[1]),add=T,col='red')
scatter3D(xc2[,1],xc2[,2], matrix(0,nrow=dim(xc2)[1]),add=T,col='blue')
