plot(xt, y3, col='red', type = 'l', xlim=c(0,1), ylim = c(0,1))
seqi <- seq(0,1,0.05)
seqj <- seq(0,1,0.05)
M <- matrix(0,nrow =length(seqi),ncol=length(seqj))
################################################
# Plot da superfície #
persp3D(seqi,seqj,M,clim=c(0,2),contour=T,
sub='Figura :')
scatter3D(x[1,1],x[1,2],1,col='red',type='p',xlim=c(0,1),ylim = c(0,1), add=T)
scatter3D(x[2,1],x[2,2],1,col='blue',type='p',xlim=c(0,1),ylim = c(0,1), add=T)
scatter3D(x[3,1],x[3,2],1,col='blue',type='p',xlim=c(0,1),ylim = c(0,1), add=T)
scatter3D(x[4,1],x[4,2],1,col='red',type='p',xlim=c(0,1),ylim = c(0,1), add=T)
library('plot3D')
rm(list=ls())
################################################
x<-matrix(c(0,0,0,1,1,0,1,1),ncol = 2,byrow = T)
xaug<-cbind(x,1) #x + bias
y<-matrix(c(0,1,1,0),ncol = 1)
# Plota pontos x[i,j] #
plot(x[1,1],x[1,2],col='red',type='p',xlim=c(0,1),
ylim = c(0,1), xlab ='x_1', ylab='x_2',
sub='Figura 1: Conjunto de pontos (X)')
par(new=T)
plot(x[2,1],x[2,2],col='blue',type='p',xlim=c(0,1),
ylim = c(0,1), xlab='', ylab='')
par(new=T)
plot(x[3,1],x[3,2],col='blue',type='p',xlim=c(0,1),ylim = c(0,1),
xlab='', ylab='')
par(new=T)
plot(x[4,1],x[4,2],col='red',type='p',xlim=c(0,1),ylim = c(0,1),
xlab='', ylab='')
################################################
# Pesos #
w1<-matrix(c(1,1,-1.5),ncol = 1)
w2<-matrix(c(1,1,-0.5),ncol = 1)
# Conjunto de pontos para gerar retas referentes a h1, h2 #
xt<-seq(0,1,0.1)
y1<--xt+1.5
y2<--xt+0.5
################################################
# Plota pontos x[i,j] #
plot(x[1,1],x[1,2],col='red',type='p',xlim=c(0,1),
ylim = c(0,1), xlab ='x_1', ylab='x_2',
sub='Figura 2: Conjunto de pontos (X)')
par(new=T)
plot(x[2,1],x[2,2],col='blue',type='p',xlim=c(0,1),
ylim = c(0,1), xlab='', ylab='',sub='')
par(new=T)
plot(x[3,1],x[3,2],col='blue',type='p',xlim=c(0,1),
ylim = c(0,1),xlab='', ylab='',sub='')
par(new=T)
plot(x[4,1],x[4,2],col='red',type='p',xlim=c(0,1),
ylim = c(0,1),xlab='', ylab='',sub='')
################################################
# Plota pontos x[i,j] #
par(new=T)
plot(xt,y1,col='red',type='l',xlim=c(0,1),ylim = c(0,1),
xlab='', ylab='',sub='')
par(new=T)
plot(xt,y2,col='red',type='l',xlim=c(0,1),ylim = c(0,1),
xlab='', ylab='',sub='')
################################################
# Gera primeira camada h1, h2) #
h1<- 1*((xaug %*% w1) >=0)
h2<- 1*((xaug %*% w2) >=0)
# Gera matriz h1, h2 #
H<-cbind(h1,h2)
plot(H[1,1],H[1,2],col='red',type='p',xlim=c(0,1),ylim = c(0,1))
par(new=T)
plot(H[2,1],H[2,2],col='blue',type='p',xlim=c(0,1),ylim = c(0,1))
par(new=T)
plot(H[3,1],H[3,2],col='blue',type='p',xlim=c(0,1),ylim = c(0,1))
par(new=T)
plot(H[4,1],H[4,2],col='red',type='p',xlim=c(0,1),ylim = c(0,1))
w3<-matrix(c(1,-1,0.5),ncol = 1)
Haug<-cbind(H,1)
h3<- 1*((Haug %*% w3) <=0)
y3 = xt + 0.5
par(new=T)
plot(xt, y3, col='red', type = 'l', xlim=c(0,1), ylim = c(0,1))
h1
h2
h3
################################################
# Funções de ativação da camada escondida #
h1 <- 1*((xaug %*% w1) >= 0)
h2 <- 1*((xaug %*% w2) >= 0)
# Gera matriz h1, h2 #
H <- cbind(h1, h2)
################################################
#  #
plot(H[1,1], H[1,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1),
sub='Figura 1: Conjunto de pontos (X)')
par(new=T)
plot(H[2,1], H[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(H[3,1], H[3,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(H[4,1], H[4,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
# Pesos da camada de saída #
w3 <- matrix(c(1,-1,0.5), ncol = 1)
# Adiciona unidades de bias #
Haug <- cbind(H, 1)
# Funções de ativação da camada de saída #
h3 <- 1*((Haug %*% w3) <= 0)
y3 <- xt + 0.5
par(new=T)
plot(xt, y3, col='red', type = 'l', xlim=c(0,1), ylim = c(0,1))
################################################
# Funções de ativação da camada escondida #
h1 <- 1*((xaug %*% w1) >= 0)
h2 <- 1*((xaug %*% w2) >= 0)
# Gera matriz h1, h2 #
H <- cbind(h1, h2)
################################################
#  #
plot(H[1,1], H[1,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='',
sub='Figura 1: Conjunto de pontos (X)')
par(new=T)
plot(H[2,1], H[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(H[3,1], H[3,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(H[4,1], H[4,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
# Pesos da camada de saída #
w3 <- matrix(c(1,-1,0.5), ncol = 1)
# Adiciona unidades de bias #
Haug <- cbind(H, 1)
# Funções de ativação da camada de saída #
h3 <- 1*((Haug %*% w3) <= 0)
y3 <- xt + 0.5
par(new=T)
plot(xt, y3, col='red', type = 'l', xlim=c(0,1), ylim = c(0,1))
################################################
# Plot da superfície #
persp3D(seqi, seqj, M, clim=c(0,2), contour=T,
sub='Figura 4: Superfície de separação - 3D')
scatter3D(X[1,1], X[1,2], 1, col='red', type='p',
xlim=c(0,1), ylim = c(0,1), add=T)
scatter3D(X[2,1], X[2,2], 1, col='blue', type='p',
xlim=c(0,1), ylim = c(0,1), add=T)
scatter3D(X[3,1], X[3,2], 1, col='blue', type='p',
xlim=c(0,1), ylim = c(0,1), add=T)
scatter3D(X[4,1], X[4,2], 1, col='red', type='p',
xlim=c(0,1), ylim = c(0,1), add=T)
library('plot3D')
rm(list=ls())
################################################
# Cria conjunto de pontos #
X <- matrix(c(0,0,0,1,1,0,1,1), ncol = 2, byrow = T)
################################################
# Plota pontos X[i,j] #
plot(X[1,1], X[1,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab ='x_1', ylab='x_2',
sub='Figura 1: Conjunto de pontos (X)')
par(new=T)
plot(X[2,1], X[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='')
par(new=T)
plot(X[3,1], X[3,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='')
par(new=T)
plot(X[4,1], X[4,2], col='red', type='p', xlim=c(0,1),
ylim = c(0,1), xlab='', ylab='')
################################################
# Adiciona unidades de bias #
Xaug <- cbind(X,1)
# Pesos da camada escondida #
w1 <- matrix(c(1,1,-1.5), ncol = 1)
w2 <- matrix(c(1,1,-0.5), ncol = 1)
# Conjunto de pontos para gerar retas referentes a h1, h2 #
xt <- seq(0, 1, 0.1)
y1 <- -xt + 1.5
y2 <- -xt + 0.5
################################################
# Plota pontos x[i,j] #
plot(X[1,1],X[1,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab ='x_1', ylab='x_2',
sub='Figura 2: Conjunto de pontos (X)')
par(new=T)
plot(X[2,1], X[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(X[3,1], X[3,2], col='blue',type='p',xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(X[4,1], X[4,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
#  #
par(new=T)
plot(xt, y1, col='red', type='l', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(xt, y2, col='red', type='l', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
# Funções de ativação da camada escondida #
h1 <- 1*((xaug %*% w1) >= 0)
h2 <- 1*((xaug %*% w2) >= 0)
# Gera matriz h1, h2 #
H <- cbind(h1, h2)
################################################
#  #
plot(H[1,1], H[1,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='',
sub='Figura 3: Conjunto de pontos (X)')
par(new=T)
plot(H[2,1], H[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(H[3,1], H[3,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(H[4,1], H[4,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
# Pesos da camada de saída #
w3 <- matrix(c(1,-1,0.5), ncol = 1)
# Adiciona unidades de bias #
Haug <- cbind(H, 1)
# Funções de ativação da camada de saída #
h3 <- 1*((Haug %*% w3) <= 0)
y3 <- xt + 0.5
par(new=T)
plot(xt, y3, col='red', type = 'l', xlim=c(0,1),
ylim = c(0,1), xlab='', ylab='', sub='')
library('plot3D')
rm(list=ls())
################################################
# Cria conjunto de pontos #
X <- matrix(c(0,0,0,1,1,0,1,1), ncol = 2, byrow = T)
################################################
# Plota pontos X[i,j] #
plot(X[1,1], X[1,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab ='x_1', ylab='x_2',
sub='Figura 1: Conjunto de pontos (X)')
par(new=T)
plot(X[2,1], X[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='')
par(new=T)
plot(X[3,1], X[3,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='')
par(new=T)
plot(X[4,1], X[4,2], col='red', type='p', xlim=c(0,1),
ylim = c(0,1), xlab='', ylab='')
################################################
# Adiciona unidades de bias #
Xaug <- cbind(X,1)
# Pesos da camada escondida #
w1 <- matrix(c(1,1,-1.5), ncol = 1)
w2 <- matrix(c(1,1,-0.5), ncol = 1)
# Conjunto de pontos para gerar retas referentes a h1, h2 #
xt <- seq(0, 1, 0.1)
y1 <- -xt + 1.5
y2 <- -xt + 0.5
################################################
# Plota pontos x[i,j] #
plot(X[1,1],X[1,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab ='x_1', ylab='x_2',
sub='Figura 2: Conjunto de pontos (X)')
par(new=T)
plot(X[2,1], X[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(X[3,1], X[3,2], col='blue',type='p',xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(X[4,1], X[4,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
#  #
par(new=T)
plot(xt, y1, col='red', type='l', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(xt, y2, col='red', type='l', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
# Funções de ativação da camada escondida #
h1 <- 1*((xaug %*% w1) >= 0)
h2 <- 1*((xaug %*% w2) >= 0)
# Gera matriz h1, h2 #
H <- cbind(h1, h2)
################################################
#  #
plot(H[1,1], H[1,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='',
sub='Figura 3: Conjunto de pontos (X)')
par(new=T)
plot(H[2,1], H[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(H[3,1], H[3,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(H[4,1], H[4,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
# Pesos da camada de saída #
w3 <- matrix(c(1,-1,0.5), ncol = 1)
# Adiciona unidades de bias #
Haug <- cbind(H, 1)
# Funções de ativação da camada de saída #
h3 <- 1*((Haug %*% w3) <= 0)
y3 <- xt + 0.5
par(new=T)
plot(xt, y3, col='red', type = 'l', xlim=c(0,1),
ylim = c(0,1), xlab='', ylab='', sub='')
library('plot3D')
rm(list=ls())
################################################
# Cria conjunto de pontos #
X <- matrix(c(0,0,0,1,1,0,1,1), ncol = 2, byrow = T)
################################################
# Plota pontos X[i,j] #
plot(X[1,1], X[1,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab ='x_1', ylab='x_2',
sub='Figura 1: Conjunto de pontos (X)')
par(new=T)
plot(X[2,1], X[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='')
par(new=T)
plot(X[3,1], X[3,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='')
par(new=T)
plot(X[4,1], X[4,2], col='red', type='p', xlim=c(0,1),
ylim = c(0,1), xlab='', ylab='')
################################################
# Adiciona unidades de bias #
Xaug <- cbind(X,1)
# Pesos da camada escondida #
w1 <- matrix(c(1,1,-1.5), ncol = 1)
w2 <- matrix(c(1,1,-0.5), ncol = 1)
# Conjunto de pontos para gerar retas referentes a h1, h2 #
xt <- seq(0, 1, 0.1)
y1 <- -xt + 1.5
y2 <- -xt + 0.5
################################################
# Plota pontos x[i,j] #
plot(X[1,1],X[1,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab ='x_1', ylab='x_2',
sub='Figura 2: Conjunto de pontos (X)')
par(new=T)
plot(X[2,1], X[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(X[3,1], X[3,2], col='blue',type='p',xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(X[4,1], X[4,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
#  #
par(new=T)
plot(xt, y1, col='red', type='l', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(xt, y2, col='red', type='l', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
# Gerar a superfície #
seqi <- seq(0, 1, 0.05)
seqj <- seq(0, 1, 0.05)
M <- matrix(0, nrow =length(seqi), ncol=length(seqj))
ci <- 0
for(i in seqi)
{
cj <- 0
ci <- ci + 1
for (j in seqj)
{
cj <- cj + 1
xt <- c(i,j,1)
h1<- 1*((xt %*% w1) >= 0)
h2<- 1*((xt %*% w2) >= 0)
M[ci,cj] <- 1*((c(h1,h2,1) %*% w3) <= 0)
}
}
################################################
# Funções de ativação da camada escondida #
h1 <- 1*((Xaug %*% w1) >= 0)
h2 <- 1*((Xaug %*% w2) >= 0)
# Gera matriz h1, h2 #
H <- cbind(h1, h2)
################################################
#  #
plot(H[1,1], H[1,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='',
sub='Figura 3: Conjunto de pontos (X)')
par(new=T)
plot(H[2,1], H[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(H[3,1], H[3,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(H[4,1], H[4,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
# Pesos da camada de saída #
w3 <- matrix(c(1,-1,0.5), ncol = 1)
# Adiciona unidades de bias #
Haug <- cbind(H, 1)
# Funções de ativação da camada de saída #
h3 <- 1*((Haug %*% w3) <= 0)
y3 <- xt + 0.5
par(new=T)
plot(xt, y3, col='red', type = 'l', xlim=c(0,1),
ylim = c(0,1), xlab='', ylab='', sub='')
w3
################################################
# Gerar a superfície #
seqi <- seq(0, 1, 0.05)
seqj <- seq(0, 1, 0.05)
M <- matrix(0, nrow =length(seqi), ncol=length(seqj))
ci <- 0
for(i in seqi)
{
cj <- 0
ci <- ci + 1
for (j in seqj)
{
cj <- cj + 1
xt <- c(i,j,1)
h1<- 1*((xt %*% w1) >= 0)
h2<- 1*((xt %*% w2) >= 0)
M[ci,cj] <- 1*((c(h1,h2,1) %*% w3) <= 0)
}
}
################################################
# Gerar a superfície #
seqi <- seq(0, 1, 0.05)
seqj <- seq(0, 1, 0.05)
M <- matrix(0, nrow =length(seqi), ncol=length(seqj))
ci <- 0
for(i in seqi)
{
cj <- 0
ci <- ci + 1
for (j in seqj)
{
cj <- cj + 1
xt <- c(i,j,1)
h1<- 1*((xt %*% w1) >= 0)
h2<- 1*((xt %*% w2) >= 0)
M[ci,cj] <- 1*((c(h1,h2,1) %*% w3) <= 0)
}
}
################################################
# Plot da superfície #
persp3D(seqi, seqj, M, clim=c(0,2), contour=T,
sub='Figura 4: Superfície de separação - 3D')
scatter3D(X[1,1], X[1,2], 1, col='red', type='p',
xlim=c(0,1), ylim = c(0,1), add=T)
scatter3D(X[2,1], X[2,2], 1, col='blue', type='p',
xlim=c(0,1), ylim = c(0,1), add=T)
scatter3D(X[3,1], X[3,2], 1, col='blue', type='p',
xlim=c(0,1), ylim = c(0,1), add=T)
scatter3D(X[4,1], X[4,2], 1, col='red', type='p',
xlim=c(0,1), ylim = c(0,1), add=T)
H
################################################
# Plot da superfície #
contour2D(M, seqi, seqj, M, clim=c(0,2), contour=T,
sub='Figura 4: Superfície de separação - 2D')
################################################
# Plot da superfície #
contour2D(M, seqi, seqj, M, clim=c(0,2),
sub='Figura 4: Superfície de separação - 2D')
################################################
# Plot da superfície #
contour2D(M, seqi, seqj, M,
sub='Figura 4: Superfície de separação - 2D')
################################################
# Plot da superfície #
contour2D(M, seqi, seqj, M,
sub='Figura 4: Superfície de separação - 2D')
################################################
# Plot da superfície #
contour(seqi, seqj, M,
sub='Figura 4: Superfície de separação - 2D')
################################################
# Plot da superfície #
contour(M, seqi, seqj,
sub='Figura 4: Superfície de separação - 2D')
################################################
# Plot da superfície #
contour2D(M, seqi, seqj,
sub='Figura 4: Superfície de separação - 2D')
################################################
# Plot da superfície #
contour(seqi, seqj, M
sub='Figura 4: Superfície de separação - 2D')
################################################
# Plot da superfície #
contour(seqi, seqj, M
sub='Figura 4: Superfície de separação - 2D')
################################################
# Plot da superfície #
contour(seqi, seqj, M,
sub='Figura 4: Superfície de separação - 2D')
