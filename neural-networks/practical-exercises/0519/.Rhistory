# rm(list=ls())
# library("RSNNS")
# data(iris)
# x <- data.matrix(iris[,1:4])
# y <- iris$Species
#
# index <- sample(2,nrow(iris),replace=TRUE,prob=c(0.7,0.3))
#
# xtrain <- x[index==1,]
# ytrain <- y[index==1]
#
# xtest <- x[index==2,]
# ytest <- y[index==2]
#
# rede <- mlp(xtrain, ytrain, size=5, learnFuncParams=c(0.1),
# maxit=50, inputsTest=xtest, targetsTest=ytest)
#
#
# yhat <- predict(rede,as.matrix(xtest))
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
library("RSNNS")
x<-runif(N,0,2*pi)
N<-20
y<-sin(x)+rnorm(N,0,0.1)
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
rede<-mlp(x, y, size=3, maxit=400,
#learnFunc="Rprop",
#learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=TRUE)
xt <- seq(0,2*pi,0.01)
yseno <- sin(xt)
yhat <- predict(rede,as.matrix(xt))
plot(x,y, type='p', col='black',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yseno, type='l', col='blue',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yhat, type='l', col='red',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
plotIterativeError(rede)
rm(list=ls())
library("RSNNS")
N<-20
x<-runif(N,0,2*pi)
y<-sin(x)+rnorm(N,0,0.1)
rede<-mlp(x, y, size=3, maxit=400,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
#learnFunc="Rprop",
#learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=TRUE)
xt <- seq(0,2*pi,0.01)
yseno <- sin(xt)
yhat <- predict(rede,as.matrix(xt))
plot(x,y, type='p', col='black',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yseno, type='l', col='blue',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yhat, type='l', col='red',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
plotIterativeError(rede)
par(new=T)
plot(x,y, type='p', col='black',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
plot(x,y, type='p', col='black',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yseno, type='l', col='blue',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yhat, type='l', col='red',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
# rm(list=ls())
# library("RSNNS")
# data(iris)
# x <- data.matrix(iris[,1:4])
# y <- iris$Species
#
# index <- sample(2,nrow(iris),replace=TRUE,prob=c(0.7,0.3))
#
# xtrain <- x[index==1,]
# ytrain <- y[index==1]
#
# xtest <- x[index==2,]
# ytest <- y[index==2]
#
# rede <- mlp(xtrain, ytrain, size=5, learnFuncParams=c(0.1),
# maxit=50, inputsTest=xtest, targetsTest=ytest)
#
#
# yhat <- predict(rede,as.matrix(xtest))
rm(list=ls())
library("RSNNS")
N<-20
x<-runif(N,0,2*pi)
y<-sin(x)+rnorm(N,0,0.1)
rede<-mlp(x, y, size=3, maxit=400,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="Rprop",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=TRUE)
xt <- seq(0,2*pi,0.01)
yseno <- sin(xt)
yhat <- predict(rede,as.matrix(xt))
plot(x,y, type='p', col='black',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yseno, type='l', col='blue',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yhat, type='l', col='red',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
plotIterativeError(rede)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/0519")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
library("RSNNS")
data(iris)
iris <- iris[sample(1:nrow(iris),length(1:nrow(iris))),1:ncol(iris)]
irisValues <- iris[,1:4]
irisTargets <- decodeClassLabels(iris[,5])
iris <- splitForTrainingAndTest(irisValues, irisTargets, ratio=0.15)
??splitForTrainingAndTest
iris <- splitForTrainingAndTest(irisValues, irisTargets, ratio=0.30)
iris <- normTrainingAndTestSet(iris)
iris
summary(iris)
rm(list=ls())
library("RSNNS")
data(iris)
iris <- iris[sample(1:nrow(iris),length(1:nrow(iris))),1:ncol(iris)]
irisValues <- iris[,1:4]
irisTargets <- decodeClassLabels(iris[,5])
iris <- splitForTrainingAndTest(irisValues, irisTargets, ratio=0.30)
irisTargets
??decodeClassLabels
iris <- splitForTrainingAndTest(irisValues, irisTargets, ratio=0.30)
iris <- normTrainingAndTestSet(iris)
rede <- mlp(iris$inputsTrain, iris$targetsTrain, size=5, learnFuncParams=c(0.1),
maxit=50, inputsTest=iris$inputsTest, targetsTest=iris$targetsTest)
summary(rede)
weightMatrix(rede)
summary(rede)
rede
weightMatrix(rede)
extractNetInfo(rede)
plotIterativeError(rede)
confusionMatrix(iris$targetsTrain,fitted.values(model))
confusionMatrix(iris$targetsTrain,fitted.values(rede))
confusionMatrix(iris$targetsTest,predictions)
predictions <- predict(rede,iris$inputsTest)
plotRegressionError(predictions[,2], iris$targetsTest[,2])
confusionMatrix(iris$targetsTrain,fitted.values(rede))
confusionMatrix(iris$targetsTest,predictions)
rm(list=ls())
library("RSNNS")
data(iris)
iris <- iris[sample(1:nrow(iris),length(1:nrow(iris))),1:ncol(iris)]
irisValues <- iris[,1:4]
irisTargets <- decodeClassLabels(iris[,5])
iris <- splitForTrainingAndTest(irisValues, irisTargets, ratio=0.30)
iris <- normTrainingAndTestSet(iris)
rede <- mlp(iris$inputsTrain, iris$targetsTrain, size=5, learnFuncParams=c(0.1),
maxit=50, inputsTest=iris$inputsTest, targetsTest=iris$targetsTest)
summary(rede)
rede
weightMatrix(rede)
par(mfrow=c(2,2))
plotIterativeError(model)
predictions <- predict(rede,iris$inputsTest)
plotRegressionError(predictions[,2], iris$targetsTest[,2])
predictions <- predict(rede,iris$inputsTest)
summary(rede)
rede
par(mfrow=c(1,2))
plotIterativeError(model)
plotRegressionError(predictions[,2], iris$targetsTest[,2])
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rede
yhat <- predict(rede,iris$inputsTest)
yhat
iris$targetsTest
yhat>=0.5
(yhat>=0.5)*1
source('~/.active-rstudio-document', echo=TRUE)
yhat
rm(list=ls())
library("RSNNS")
N<-20
x<-runif(N,0,2*pi)
y<-sin(x)+rnorm(N,0,0.1)
rede<-mlp(x, y, size=3, maxit=400,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="Rprop",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=TRUE)
xt <- seq(0,2*pi,0.01)
yseno <- sin(xt)
yhat <- predict(rede,as.matrix(xt))
par(mfrow=c(1,2))
plot(x,y, type='p', col='black',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yseno, type='l', col='blue',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yhat, type='l', col='red',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
plotIterativeError(rede)
install.packages("RSNNS")
rm(list=ls())
library("RSNNS")
N<-20
x<-runif(N,0,2*pi)
y<-sin(x)+rnorm(N,0,0.1)
rede<-mlp(x, y, size=3, maxit=400,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="Rprop",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=TRUE)
xt <- seq(0,2*pi,0.01)
yseno <- sin(xt)
yhat <- predict(rede,as.matrix(xt))
par(mfrow=c(1,2))
plot(x,y, type='p', col='black',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yseno, type='l', col='blue',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yhat, type='l', col='red',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
plotIterativeError(rede)
rm(list=ls())
library("RSNNS")
N<-20
x<-runif(N,0,2*pi)
y<-sin(x)+rnorm(N,0,0.1)
rede<-mlp(x, y, size=3, maxit=400,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="Rprop",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=TRUE)
xt <- seq(0,2*pi,0.01)
yseno <- sin(xt)
yhat <- predict(rede,as.matrix(xt))
par(mfrow=c(1,2))
plot(x,y, type='p', col='black',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yseno, type='l', col='blue',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
par(new=T)
plot(xt,yhat, type='l', col='red',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)))
plotIterativeError(rede)
rm(list=ls())
library("RSNNS")
N<-20
x<-runif(N,0,2*pi)
y<-sin(x)+rnorm(N,0,0.1)
rede<-mlp(x, y, size=3, maxit=400,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="Rprop",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=TRUE)
xt <- seq(0,2*pi,0.01)
yseno <- sin(xt)
yhat <- predict(rede,as.matrix(xt))
par(mfrow=c(1,2))
plot(x,y, type='p', col='black',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)),xlab='x', ylab='y')
par(new=T)
plot(xt,yseno, type='l', col='blue',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)),xlab='x', ylab='y')
par(new=T)
plot(xt,yhat, type='l', col='red',xlim=c(min(xt),max(xt)), ylim=c(min(yseno),max(yseno)),xlab='x', ylab='y')
plotIterativeError(rede)
rm(list=ls())
library("RSNNS")
data(iris)
iris <- iris[sample(1:nrow(iris),length(1:nrow(iris))),1:ncol(iris)]
irisValues <- iris[,1:4]
irisTargets <- decodeClassLabels(iris[,5])
iris <- splitForTrainingAndTest(irisValues, irisTargets, ratio=0.30)
iris <- normTrainingAndTestSet(iris)
rede<-mlp(iris$inputsTrain, iris$targetsTrain, size=5, maxit=40,
inputsTest=iris$inputsTest, targetsTest=iris$targetsTest,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="Rprop",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
yhat <- (predict(rede,iris$inputsTest) >= 0.5)*1
summary(rede)
rede
rm(list=ls())
library("RSNNS")
data(iris)
iris <- iris[sample(1:nrow(iris),length(1:nrow(iris))),1:ncol(iris)]
irisValues <- iris[,1:4]
irisTargets <- decodeClassLabels(iris[,5])
iris <- splitForTrainingAndTest(irisValues, irisTargets, ratio=0.30)
iris <- normTrainingAndTestSet(iris)
rede<-mlp(iris$inputsTrain, iris$targetsTrain, size=5, maxit=40,
inputsTest=iris$inputsTest, targetsTest=iris$targetsTest,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="Rprop",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
yhat <- (predict(rede,iris$inputsTest) >= 0.5)*1
summary(rede)
rede
yhat
irisTargets
all.equal(yhat,irisTargets)
mean(sqrt((yhat-irisTargets)^2))
dim(yhat)
dim(irisTargets)
mean(sqrt((yhat-iris$targetsTest)^2))
rm(list=ls())
library("RSNNS")
data(iris)
iris <- iris[sample(1:nrow(iris),length(1:nrow(iris))),1:ncol(iris)]
irisValues <- iris[,1:4]
irisTargets <- decodeClassLabels(iris[,5])
iris <- splitForTrainingAndTest(irisValues, irisTargets, ratio=0.30)
iris <- normTrainingAndTestSet(iris)
rede<-mlp(iris$inputsTrain, iris$targetsTrain, size=5, maxit=40,
inputsTest=iris$inputsTest, targetsTest=iris$targetsTest,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="Rprop",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
yhat <- (predict(rede,iris$inputsTest) >= 0.5)*1
mean(sqrt((yhat-iris$targetsTest)^2))
summary(rede)
rede
