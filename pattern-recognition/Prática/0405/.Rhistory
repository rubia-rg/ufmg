source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source("aula.8")
source(aula.8)
setwd("~/0504")
source(aula.8)
source("aula8")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
setwd("~/0504")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
indexDist <- function(xt, u)
{
dist <- c()
for (i in 1:(dim(u)[1]))
{
dist[i] <- sqrt((xt-u[i])^2)
}
return(which.min(dist))
}
kmeans <- function(X, k)
{
# Obtem as dimensoes de X #
N <- dim(X)[1]
n <- dim(X)[2]
# Numero de iteracoes max. #
max <- 100
# u: k-centros de X
u <- matrix(nrow = k, ncol = n)
xseq <- sample(N)
u <- X[xseq[1:k],] # vetor de exemplos
# calcular dist do padrao ao centro
# rotular padrao conforme min dist
# atribui a um vetor
xt <- c()
iseq <- sample(N)
groups <- c()
old <- c()
flag <- TRUE
count <- 0
while(count < max && flag)
{
count <- count + 1
old <- groups
for (i in 1:N)
{
xt <- X[i,]
groups[i] <- indexDist(xt, u)
}
# Calcula novos centros pelas medias de cada grupo
for (i in 1:k){ u[i] <- mean(X[groups==i]) }
flag <- ifelse(all.equal(groups,old)==TRUE, TRUE, FALSE)
}
# retornar centros, gx: grupo de x
return(list(u,groups))
}
N <- 100
components <- sample(1:3,prob=c(0.3,0.5,0.2),size=N,replace=TRUE)
mus <- c(0,10,3)
sds <- sqrt(c(1,1,0.1))
samples <- rnorm(n=N,mean=mus[components],sd=sds[components])
kmeans(samples, 3)
kmeans <- function(X, k)
{
# Obtem as dimensoes de X #
N <- dim(X)[1]
n <- dim(X)[2]
# Numero de iteracoes max. #
max <- 100
# u: k-centros de X
u <- matrix(1, nrow = k, ncol = n)
xseq <- sample(N)
u <- X[xseq[1:k],] # vetor de exemplos
# calcular dist do padrao ao centro
# rotular padrao conforme min dist
# atribui a um vetor
xt <- c()
iseq <- sample(N)
groups <- c()
old <- c()
flag <- TRUE
count <- 0
while(count < max && flag)
{
count <- count + 1
old <- groups
for (i in 1:N)
{
xt <- X[i,]
groups[i] <- indexDist(xt, u)
}
# Calcula novos centros pelas medias de cada grupo
for (i in 1:k){ u[i] <- mean(X[groups==i]) }
flag <- ifelse(all.equal(groups,old)==TRUE, TRUE, FALSE)
}
# retornar centros, gx: grupo de x
return(list(u,groups))
}
N <- 100
components <- sample(1:3,prob=c(0.3,0.5,0.2),size=N,replace=TRUE)
mus <- c(0,10,3)
sds <- sqrt(c(1,1,0.1))
samples <- rnorm(n=N,mean=mus[components],sd=sds[components])
kmeans(samples, 3)
N <- 100
components <- sample(1:3,prob=c(0.3,0.5,0.2),size=N,replace=TRUE)
mus <- c(0,10,3)
sds <- sqrt(c(1,1,0.1))
samples <- matrix(rnorm(n=N,mean=mus[components],sd=sds[components],ncol=2)
kmeans(samples, 3)
indexDist <- function(xt, u)
{
dist <- c()
for (i in 1:(dim(u)[1]))
{
dist[i] <- sqrt((xt-u[i])^2)
}
return(which.min(dist))
}
kmeans <- function(X, k)
{
# Obtem as dimensoes de X #
N <- dim(X)[1]
n <- dim(X)[2]
# Numero de iteracoes max. #
max <- 100
# u: k-centros de X
u <- matrix(1, nrow = k, ncol = n)
xseq <- sample(N)
u <- X[xseq[1:k],] # vetor de exemplos
# calcular dist do padrao ao centro
# rotular padrao conforme min dist
# atribui a um vetor
xt <- c()
iseq <- sample(N)
groups <- c()
old <- c()
flag <- TRUE
count <- 0
while(count < max && flag==TRUE)
{
count <- count + 1
old <- groups
for (i in 1:N)
{
xt <- X[i,]
groups[i] <- indexDist(xt, u)
}
# Calcula novos centros pelas medias de cada grupo
for (i in 1:k){ u[i] <- mean(X[groups==i]) }
flag <- ifelse(all.equal(groups,old)==TRUE, TRUE, FALSE)
}
# retornar centros, gx: grupo de x
return(list(u,groups))
}
N <- 100
components <- sample(1:3,prob=c(0.3,0.5,0.2),size=N,replace=TRUE)
mus <- c(0,10,3)
sds <- sqrt(c(1,1,0.1))
samples <- matrix(rnorm(n=N,mean=mus[components],sd=sds[components],ncol=2)
kmeans(samples, 3)
samples
indexDist <- function(xt, u)
{
dist <- c()
for (i in 1:(dim(u)[1]))
{
dist[i] <- sqrt((xt-u[i])^2)
}
return(which.min(dist))
}
kmeans <- function(X, k)
{
# Obtem as dimensoes de X #
N <- dim(X)[1]
n <- dim(X)[2]
# Numero de iteracoes max. #
max <- 100
# u: k-centros de X
u <- matrix(1, nrow = k, ncol = n)
xseq <- sample(N)
u <- X[xseq[1:k],] # vetor de exemplos
# calcular dist do padrao ao centro
# rotular padrao conforme min dist
# atribui a um vetor
xt <- c()
iseq <- sample(N)
groups <- c()
old <- c()
flag <- TRUE
count <- 0
while(count < max && flag==TRUE)
{
count <- count + 1
old <- groups
for (i in 1:N)
{
xt <- X[i,]
groups[i] <- indexDist(xt, u)
}
# Calcula novos centros pelas medias de cada grupo
for (i in 1:k){ u[i] <- mean(X[groups==i]) }
flag <- ifelse(all.equal(groups,old)==TRUE, TRUE, FALSE)
}
# retornar centros, gx: grupo de x
return(list(u,groups))
}
######################
N <- 100
components <- sample(1:3,prob=c(0.3,0.5,0.2),size=N,replace=TRUE)
mus <- c(0,10,3)
sds <- sqrt(c(1,1,0.1))
samples <- matrix(rnorm(n=N,mean=mus[components],sd=sds[components],nrow=50,ncol=2)
kmeans(samples, 3)
