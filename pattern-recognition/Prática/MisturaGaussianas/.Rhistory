# Classificação #
Ntest <- dim(test)[1]
testY <- c()
for(i in 1:Ntest)
{
testY[i] <- ifelse(pxc1[i]/pxc2[i] >= pc2/pc1, 1, 2)
error[i] <- (testY[i]-testLabels[i])^2
}
mse[j] <- mean(error)
sde[j] <- sd(error)
testCM <- table(testY,testLabels)
acc[j] <- (testCM[1,1]+testCM[2,2])/(dim(test)[1])
}
mean(mse)
mean(sde)
rm(list=ls())
library('MASS')
library('mlbench')
library('mclust')
###########################
# Dataset BreastCancer #
data(BreastCancer)
Xdata <- data.matrix(BreastCancer[,2:10])
X1 <- Xdata[which(Y==1),]
X2 <- Xdata[which(Y==2),]
X <- cbind(X1,X2[70:241,])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
###########################
# Auxiliares #
acc <- c()
error <- c()
mse <- c()
sde <- c()
for(j in 1:10){
###########################
# Amostrar dados #
index <- sample(2, nrow(BreastCancer), replace=TRUE, prob=c(0.70,0.30))
###########################
# Conjunto de treinamento #
training <- X[which(index==1),]
trainingLabels <- as.matrix(Y[which(index==1)])
###########################
# Conjunto de teste #
test <- X[which(index==2),]
testLabels <- as.matrix(Y[which(index==2)])
###########################
# Probabilidades a priori #
pc1 <- length(Y[which(Y==1)])/(length(Y))
pc2 <- length(Y[which(Y==2)])/(length(Y))
###########################
# Treinamento #
mod1 = densityMclust(training[which(trainingLabels==1),])
mod2 = densityMclust(training[which(trainingLabels==2),])
###########################
# Teste #
pxc1 <- dens(modelName=mod1$modelName, data = test, parameters = mod1$parameters)
pxc2 <- dens(modelName=mod2$modelName, data = test, parameters = mod2$parameters)
###########################
# Classificação #
Ntest <- dim(test)[1]
testY <- c()
for(i in 1:Ntest)
{
testY[i] <- ifelse(pxc1[i]/pxc2[i] >= pc2/pc1, 1, 2)
error[i] <- (testY[i]-testLabels[i])^2
}
mse[j] <- mean(error)
sde[j] <- sd(error)
testCM <- table(testY,testLabels)
acc[j] <- (testCM[1,1]+testCM[2,2])/(dim(test)[1])
}
mean(mse)
mean(sde)
###########################
# Dataset BreastCancer #
data(BreastCancer)
Xdata <- data.matrix(BreastCancer[,2:10])
Y <- as.numeric(BreastCancer$Class)
X1 <- Xdata[which(Y==1),]
X2 <- Xdata[which(Y==2),]
X <- cbind(X1,X2[70:241,])
X[is.na(X)] <- 0
###########################
# Auxiliares #
acc <- c()
error <- c()
mse <- c()
sde <- c()
for(j in 1:10){
###########################
# Amostrar dados #
index <- sample(2, nrow(BreastCancer), replace=TRUE, prob=c(0.70,0.30))
###########################
# Conjunto de treinamento #
training <- X[which(index==1),]
trainingLabels <- as.matrix(Y[which(index==1)])
###########################
# Conjunto de teste #
test <- X[which(index==2),]
testLabels <- as.matrix(Y[which(index==2)])
###########################
# Probabilidades a priori #
pc1 <- length(Y[which(Y==1)])/(length(Y))
pc2 <- length(Y[which(Y==2)])/(length(Y))
###########################
# Treinamento #
mod1 = densityMclust(training[which(trainingLabels==1),])
mod2 = densityMclust(training[which(trainingLabels==2),])
###########################
# Teste #
pxc1 <- dens(modelName=mod1$modelName, data = test, parameters = mod1$parameters)
pxc2 <- dens(modelName=mod2$modelName, data = test, parameters = mod2$parameters)
###########################
# Classificação #
Ntest <- dim(test)[1]
testY <- c()
for(i in 1:Ntest)
{
testY[i] <- ifelse(pxc1[i]/pxc2[i] >= pc2/pc1, 1, 2)
error[i] <- (testY[i]-testLabels[i])^2
}
mse[j] <- mean(error)
sde[j] <- sd(error)
testCM <- table(testY,testLabels)
acc[j] <- (testCM[1,1]+testCM[2,2])/(dim(test)[1])
}
mean(mse)
mean(sde)
###########################
# Dataset BreastCancer #
data(BreastCancer)
Xdata <- data.matrix(BreastCancer[,2:10])
Y <- as.numeric(BreastCancer$Class)
X1 <- Xdata[which(Y==1),]
X2 <- Xdata[which(Y==2),]
X <- cbind(X1,X2[70:241,])
X[is.na(X)] <- 0
###########################
# Auxiliares #
acc <- c()
error <- c()
mse <- c()
sde <- c()
for(j in 1:10){
###########################
# Amostrar dados #
index <- sample(2, nrow(BreastCancer), replace=TRUE, prob=c(0.70,0.30))
###########################
# Conjunto de treinamento #
training <- X[which(index==1),]
trainingLabels <- as.matrix(Y[which(index==1)])
###########################
# Conjunto de teste #
test <- X[which(index==2),]
testLabels <- as.matrix(Y[which(index==2)])
###########################
# Probabilidades a priori #
pc1 <- length(Y[which(Y==1)])/(length(Y))
pc2 <- length(Y[which(Y==2)])/(length(Y))
###########################
# Treinamento #
mod1 = densityMclust(training[which(trainingLabels==1),])
mod2 = densityMclust(training[which(trainingLabels==2),])
###########################
# Teste #
pxc1 <- dens(modelName=mod1$modelName, data = test, parameters = mod1$parameters)
pxc2 <- dens(modelName=mod2$modelName, data = test, parameters = mod2$parameters)
###########################
# Classificação #
Ntest <- dim(test)[1]
testY <- c()
for(i in 1:Ntest)
{
testY[i] <- ifelse(pxc1[i]/pxc2[i] >= pc2/pc1, 1, 2)
error[i] <- (testY[i]-testLabels[i])^2
}
mse[j] <- mean(error)
sde[j] <- sd(error)
testCM <- table(testY,testLabels)
acc[j] <- (testCM[1,1]+testCM[2,2])/(dim(test)[1])
}
mean(mse)
mean(sde)
###########################
# Dataset BreastCancer #
data(BreastCancer)
Xdata <- data.matrix(BreastCancer[,2:10])
Y <- as.numeric(BreastCancer$Class)
X1 <- Xdata[which(Y==1),]
X2 <- Xdata[which(Y==2),]
X <- as.matrix(rbind(X1,X2[70:241,]))
X[is.na(X)] <- 0
###########################
# Auxiliares #
acc <- c()
error <- c()
mse <- c()
sde <- c()
for(j in 1:10){
###########################
# Amostrar dados #
index <- sample(2, nrow(BreastCancer), replace=TRUE, prob=c(0.70,0.30))
###########################
# Conjunto de treinamento #
training <- X[which(index==1),]
trainingLabels <- as.matrix(Y[which(index==1)])
###########################
# Conjunto de teste #
test <- X[which(index==2),]
testLabels <- as.matrix(Y[which(index==2)])
###########################
# Probabilidades a priori #
pc1 <- length(Y[which(Y==1)])/(length(Y))
pc2 <- length(Y[which(Y==2)])/(length(Y))
###########################
# Treinamento #
mod1 = densityMclust(training[which(trainingLabels==1),])
mod2 = densityMclust(training[which(trainingLabels==2),])
###########################
# Teste #
pxc1 <- dens(modelName=mod1$modelName, data = test, parameters = mod1$parameters)
pxc2 <- dens(modelName=mod2$modelName, data = test, parameters = mod2$parameters)
###########################
# Classificação #
Ntest <- dim(test)[1]
testY <- c()
for(i in 1:Ntest)
{
testY[i] <- ifelse(pxc1[i]/pxc2[i] >= pc2/pc1, 1, 2)
error[i] <- (testY[i]-testLabels[i])^2
}
mse[j] <- mean(error)
sde[j] <- sd(error)
testCM <- table(testY,testLabels)
acc[j] <- (testCM[1,1]+testCM[2,2])/(dim(test)[1])
}
mean(mse)
mean(sde)
###########################
# Dataset BreastCancer #
data(BreastCancer)
Xdata <- data.matrix(BreastCancer[,2:10])
Y <- as.numeric(BreastCancer$Class)
X1 <- Xdata[which(Y==1),]
X2 <- Xdata[which(Y==2),]
X <- rbind(X1,X2[70:241,])
X[is.na(X)] <- 0
###########################
# Auxiliares #
acc <- c()
error <- c()
mse <- c()
sde <- c()
for(j in 1:10){
###########################
# Amostrar dados #
index <- sample(2, nrow(BreastCancer), replace=TRUE, prob=c(0.70,0.30))
###########################
# Conjunto de treinamento #
training <- X[which(index==1),]
trainingLabels <- as.matrix(Y[which(index==1)])
###########################
# Conjunto de teste #
test <- X[which(index==2),]
testLabels <- as.matrix(Y[which(index==2)])
###########################
# Probabilidades a priori #
pc1 <- length(Y[which(Y==1)])/(length(Y))
pc2 <- length(Y[which(Y==2)])/(length(Y))
###########################
# Treinamento #
mod1 = densityMclust(training[which(trainingLabels==1),])
mod2 = densityMclust(training[which(trainingLabels==2),])
###########################
# Teste #
pxc1 <- dens(modelName=mod1$modelName, data = test, parameters = mod1$parameters)
pxc2 <- dens(modelName=mod2$modelName, data = test, parameters = mod2$parameters)
###########################
# Classificação #
Ntest <- dim(test)[1]
testY <- c()
for(i in 1:Ntest)
{
testY[i] <- ifelse(pxc1[i]/pxc2[i] >= pc2/pc1, 1, 2)
error[i] <- (testY[i]-testLabels[i])^2
}
mse[j] <- mean(error)
sde[j] <- sd(error)
testCM <- table(testY,testLabels)
acc[j] <- (testCM[1,1]+testCM[2,2])/(dim(test)[1])
}
mean(mse)
mean(sde)
###########################
# Dataset BreastCancer #
data(BreastCancer)
Xdata <- data.matrix(BreastCancer[,2:10])
Y <- as.numeric(BreastCancer$Class)
X1 <- Xdata[which(Y==1),]
X2 <- Xdata[which(Y==2),]
X <- data.matrix(rbind(X1,X2[70:241,]))
X[is.na(X)] <- 0
###########################
# Auxiliares #
acc <- c()
error <- c()
mse <- c()
sde <- c()
for(j in 1:10){
###########################
# Amostrar dados #
index <- sample(2, nrow(BreastCancer), replace=TRUE, prob=c(0.70,0.30))
###########################
# Conjunto de treinamento #
training <- X[which(index==1),]
trainingLabels <- as.matrix(Y[which(index==1)])
###########################
# Conjunto de teste #
test <- X[which(index==2),]
testLabels <- as.matrix(Y[which(index==2)])
###########################
# Probabilidades a priori #
pc1 <- length(Y[which(Y==1)])/(length(Y))
pc2 <- length(Y[which(Y==2)])/(length(Y))
###########################
# Treinamento #
mod1 = densityMclust(training[which(trainingLabels==1),])
mod2 = densityMclust(training[which(trainingLabels==2),])
###########################
# Teste #
pxc1 <- dens(modelName=mod1$modelName, data = test, parameters = mod1$parameters)
pxc2 <- dens(modelName=mod2$modelName, data = test, parameters = mod2$parameters)
###########################
# Classificação #
Ntest <- dim(test)[1]
testY <- c()
for(i in 1:Ntest)
{
testY[i] <- ifelse(pxc1[i]/pxc2[i] >= pc2/pc1, 1, 2)
error[i] <- (testY[i]-testLabels[i])^2
}
mse[j] <- mean(error)
sde[j] <- sd(error)
testCM <- table(testY,testLabels)
acc[j] <- (testCM[1,1]+testCM[2,2])/(dim(test)[1])
}
mean(mse)
mean(sde)
###########################
# Dataset BreastCancer #
data(BreastCancer)
Xdata <- data.matrix(BreastCancer[,2:10])
Y <- as.numeric(BreastCancer$Class)
X1 <- Xdata[which(Y==1),]
X2 <- Xdata[which(Y==2),]
X <- rbind(X1,X2[70:241,])
X[is.na(X)] <- 0
###########################
# Auxiliares #
acc <- c()
error <- c()
mse <- c()
sde <- c()
for(j in 1:10){
###########################
# Amostrar dados #
index <- sample(2, nrow(BreastCancer), replace=TRUE, prob=c(0.70,0.30))
###########################
# Conjunto de treinamento #
training <- X[which(index==1),]
trainingLabels <- as.matrix(Y[which(index==1)])
###########################
# Conjunto de teste #
test <- X[which(index==2),]
testLabels <- as.matrix(Y[which(index==2)])
###########################
# Probabilidades a priori #
pc1 <- length(Y[which(Y==1)])/(length(Y))
pc2 <- length(Y[which(Y==2)])/(length(Y))
###########################
# Treinamento #
mod1 = densityMclust(training[which(trainingLabels==1),])
mod2 = densityMclust(training[which(trainingLabels==2),])
###########################
# Teste #
pxc1 <- dens(modelName=mod1$modelName, data = test, parameters = mod1$parameters)
pxc2 <- dens(modelName=mod2$modelName, data = test, parameters = mod2$parameters)
###########################
# Classificação #
Ntest <- dim(test)[1]
testY <- c()
for(i in 1:Ntest)
{
testY[i] <- ifelse(pxc1[i]/pxc2[i] >= pc2/pc1, 1, 2)
error[i] <- (testY[i]-testLabels[i])^2
}
mse[j] <- mean(error)
sde[j] <- sd(error)
testCM <- table(testY,testLabels)
acc[j] <- (testCM[1,1]+testCM[2,2])/(dim(test)[1])
}
mean(mse)
mean(sde)
###########################
# Dataset BreastCancer #
data(BreastCancer)
Xdata <- data.matrix(BreastCancer[,2:10])
Y <- as.numeric(BreastCancer$Class)
X1 <- Xdata[which(Y==1),]
X2 <- Xdata[which(Y==2),]
X <- rbind(X1,X2[70:241,])
X[is.na(X)] <- 0
###########################
# Auxiliares #
acc <- c()
error <- c()
mse <- c()
sde <- c()
for(j in 1:10){
###########################
# Amostrar dados #
index <- sample(2, nrow(BreastCancer)-70, replace=TRUE, prob=c(0.70,0.30))
###########################
# Conjunto de treinamento #
training <- X[which(index==1),]
trainingLabels <- as.matrix(Y[which(index==1)])
###########################
# Conjunto de teste #
test <- X[which(index==2),]
testLabels <- as.matrix(Y[which(index==2)])
###########################
# Probabilidades a priori #
pc1 <- length(Y[which(Y==1)])/(length(Y))
pc2 <- length(Y[which(Y==2)])/(length(Y))
###########################
# Treinamento #
mod1 = densityMclust(training[which(trainingLabels==1),])
mod2 = densityMclust(training[which(trainingLabels==2),])
###########################
# Teste #
pxc1 <- dens(modelName=mod1$modelName, data = test, parameters = mod1$parameters)
pxc2 <- dens(modelName=mod2$modelName, data = test, parameters = mod2$parameters)
###########################
# Classificação #
Ntest <- dim(test)[1]
testY <- c()
for(i in 1:Ntest)
{
testY[i] <- ifelse(pxc1[i]/pxc2[i] >= pc2/pc1, 1, 2)
error[i] <- (testY[i]-testLabels[i])^2
}
mse[j] <- mean(error)
sde[j] <- sd(error)
testCM <- table(testY,testLabels)
acc[j] <- (testCM[1,1]+testCM[2,2])/(dim(test)[1])
}
mean(mse)
mean(sde)
acc
###########################
# Dataset BreastCancer #
data(BreastCancer)
X<- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
###########################
# Auxiliares #
acc <- c()
error <- c()
mse <- c()
sde <- c()
for(j in 1:10){
###########################
# Amostrar dados #
index <- sample(2, nrow(BreastCancer), replace=TRUE, prob=c(0.70,0.30))
###########################
# Conjunto de treinamento #
training <- X[which(index==1),]
trainingLabels <- as.matrix(Y[which(index==1)])
###########################
# Conjunto de teste #
test <- X[which(index==2),]
testLabels <- as.matrix(Y[which(index==2)])
###########################
# Probabilidades a priori #
pc1 <- length(Y[which(Y==1)])/(length(Y))
pc2 <- length(Y[which(Y==2)])/(length(Y))
###########################
# Treinamento #
mod1 = densityMclust(training[which(trainingLabels==1),])
mod2 = densityMclust(training[which(trainingLabels==2),])
###########################
# Teste #
pxc1 <- dens(modelName=mod1$modelName, data = test, parameters = mod1$parameters)
pxc2 <- dens(modelName=mod2$modelName, data = test, parameters = mod2$parameters)
###########################
# Classificação #
Ntest <- dim(test)[1]
testY <- c()
for(i in 1:Ntest)
{
testY[i] <- ifelse(pxc1[i]/pxc2[i] >= pc2/pc1, 1, 2)
error[i] <- (testY[i]-testLabels[i])^2
}
mse[j] <- mean(error)
sde[j] <- sd(error)
testCM <- table(testY,testLabels)
acc[j] <- (testCM[1,1]+testCM[2,2])/(dim(test)[1])
}
mean(mse)
mean(sde)
