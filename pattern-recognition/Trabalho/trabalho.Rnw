\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

<<echo=T,fig=F>>=
rm(list=ls())
source('proximityK.r')
library(mlbench)
library(caret)
library(kernlab)
library(e1071)
@

<<echo=T,fig=F>>=
data("BreastCancer")
BC <- BreastCancer[,2:11]
BC <- na.omit(BC)
bcTargets <- as.numeric(BC[,10])
BC <- BC[,-10]

bcV1 <- BC[which(bcTargets==1),]
bcV2 <- BC[which(bcTargets==2),]
bcT1 <- bcTargets[which(bcTargets==1)]
bcT2 <- bcTargets[which(bcTargets==2)]

train1 <- sample(nrow(bcV1),size=(nrow(bcV1)*0.7))
train2 <- sample(nrow(bcV2),size=(nrow(bcV2)*0.7))

bcTrain <- rbind(bcV1[train1,],bcV2[train2,])
bcTrainLabels <- c(bcT1[train1],bcT2[train2])

bcTest <- rbind(bcV1[-train1,],bcV2[-train2,])
bcTestLabels <- c(bcT1[-train1],bcT2[-train2])

bcValues <- rbind(bcTrain, bcTest)

itrain <- 1:nrow(bcTrain)
itest <- (1:nrow(bcValues))[-itrain]

clbc <- cmeans(bcValues,2)
Kbc <- proximityK(clbc$membership, clbc$cluster)
Kbc <- as.matrix(Kbc)

svpbc <- ksvm(Kbc[itrain,itrain], bcTrainLabels, kernel='matrix', type="C-svc")

# test data
# test kernel matrix i.e. inner/kernel product of test data with
# Support Vectors
testbc <- as.kernelMatrix(Kbc[itest,itrain][,SVindex(svpbc), drop=F])
ybc <- predict(svpbc, testbc)
1-mean((ybc-bcTestLabels)^2)

@

<<echo=T,fig=F>>=
wine <- read.csv(file="wine.csv",header=FALSE,sep=",")
wineTargets <- as.numeric(wine[,1])
wine[which(wineTargets==3)] <- 2
wine <- wine[,-1]

wineV1 <- wine[which(wineTargets==1),]
wineV2 <- wine[which(wineTargets==2),]
wineT1 <- wineTargets[which(wineTargets==1)]
wineT2 <- wineTargets[which(wineTargets==2)]

train1 <- sample(nrow(wineV1),size=(nrow(wineV1)*0.7))
train2 <- sample(nrow(wineV2),size=(nrow(wineV2)*0.7))

wineTrain <- rbind(wineV1[train1,],wineV2[train2,])
wineTrainLabels <- c(wineT1[train1],wineT2[train2])

wineTest <- rbind(wineV1[-train1,],wineV2[-train2,])
wineTestLabels <- c(wineT1[-train1],wineT2[-train2])

wineValues <- rbind(wineTrain, wineTest)

itrain <- 1:nrow(wineTrain)
itest <- (1:nrow(wineValues))[-itrain]

clwine <- cmeans(wineValues,2)
Kwine <- proximityK(clwine$membership, clwine$cluster)
Kwine <- as.matrix(Kwine)

svpwine <- ksvm(Kwine[itrain,itrain], wineTrainLabels, kernel='matrix', type="C-svc")

# test data
# test kernel matrix i.e. inner/kernel product of test data with
# Support Vectors
testwine <- as.kernelMatrix(Kwine[itest,itrain][,SVindex(svpwine), drop=F])
ywine <- predict(svpwine, testwine)
1-mean((ywine-wineTestLabels)^2)
@

<<echo=T,fig=F>>=
data("iris")
clPairs(wine,wine[,1])
irisTargets <- as.numeric(iris$Species)
irisTargets[which(irisTargets==2)] <- 1
irisTargets[which(irisTargets==3)] <- 2
iris <- iris[,-5]

irisV1 <- iris[which(irisTargets==1),]
irisV2 <- iris[which(irisTargets==2),]
irisT1 <- irisTargets[which(irisTargets==1)]
irisT2 <- irisTargets[which(irisTargets==2)]

train1 <- sample(nrow(irisV1),size=(nrow(irisV1)*0.7))
train2 <- sample(nrow(irisV2),size=(nrow(irisV2)*0.7))

irisTrain <- rbind(irisV1[train1,],irisV2[train2,])
irisTrainLabels <- c(irisT1[train1],irisT2[train2])

irisTest <- rbind(irisV1[-train1,],irisV2[-train2,])
irisTestLabels <- c(irisT1[-train1],irisT2[-train2])

irisValues <- rbind(irisTrain, irisTest)

itrain <- 1:nrow(irisTrain)
itest <- (1:nrow(irisValues))[-itrain]

cliris <- cmeans(irisValues,2)
Kiris <- proximityK(cliris$membership, cliris$cluster)
Kiris <- as.matrix(Kiris)

svpiris <- ksvm(Kiris[itrain,itrain], irisTrainLabels, kernel='matrix', type="C-svc")

# test data
# test kernel matrix i.e. inner/kernel product of test data with
# Support Vectors
testiris <- as.kernelMatrix(Kiris[itest,itrain][,SVindex(svpiris), drop=F])
yiris <- predict(svpiris, testiris)
1-mean((yiris-irisTestLabels)^2)
@

<<echo=T,fig=F>>=
pop <- read.table(file="pop_failures.dat",header=TRUE)
popTargets <- as.numeric(pop[,21])
pop <- pop[,-21]

popV1 <- pop[which(popTargets==0),]
popV2 <- pop[which(popTargets==1),]
popT1 <- popTargets[which(popTargets==0)]
popT2 <- popTargets[which(popTargets==1)]

train1 <- sample(nrow(popV1),size=(nrow(popV1)*0.7))
train2 <- sample(nrow(popV2),size=(nrow(popV2)*0.7))

popTrain <- rbind(popV1[train1,],popV2[train2,])
popTrainLabels <- c(popT1[train1],popT2[train2])

popTest <- rbind(popV1[-train1,],popV2[-train2,])
popTestLabels <- c(popT1[-train1],popT2[-train2])

popValues <- rbind(popTrain, popTest)

itrain <- 1:nrow(popTrain)
itest <- (1:nrow(popValues))[-itrain]

clpop <- cmeans(popValues,2)
Kpop <- proximityK(clpop$membership, clpop$cluster)
Kpop <- as.matrix(Kpop)

svppop <- ksvm(Kpop[itrain,itrain], popTrainLabels, kernel='matrix', type="C-svc")

# test data
# test kernel matrix i.e. inner/kernel product of test data with
# Support Vectors
testpop <- as.kernelMatrix(Kpop[itest,itrain][,SVindex(svppop), drop=F])
ypop <- predict(svppop, testpop)
1-mean((ypop-popTestLabels)^2)
@

<<echo=T,fig=F>>=
vowel <- read.table(file="vowel-context.data",header=FALSE)
vowelTargets <- as.numeric(vowel[,1])
vowel <- vowel[,-1]

vowelV1 <- vowel[which(vowelTargets==0),]
vowelV2 <- vowel[which(vowelTargets==1),]
vowelT1 <- vowelTargets[which(vowelTargets==0)]
vowelT2 <- vowelTargets[which(vowelTargets==1)]

train1 <- sample(nrow(vowelV1),size=(nrow(vowelV1)*0.7))
train2 <- sample(nrow(vowelV2),size=(nrow(vowelV2)*0.7))

vowelTrain <- rbind(vowelV1[train1,],vowelV2[train2,])
vowelTrainLabels <- c(vowelT1[train1],vowelT2[train2])

vowelTest <- rbind(vowelV1[-train1,],vowelV2[-train2,])
vowelTestLabels <- c(vowelT1[-train1],vowelT2[-train2])

vowelValues <- rbind(vowelTrain, vowelTest)

itrain <- 1:nrow(vowelTrain)
itest <- (1:nrow(vowelValues))[-itrain]

clvowel <- cmeans(vowelValues,2)
Kvowel <- proximityK(clvowel$membership, clvowel$cluster)
Kvowel <- as.matrix(Kvowel)

svpvowel <- ksvm(Kvowel[itrain,itrain], vowelTrainLabels, kernel='matrix', type="C-svc")

# test data
# test kernel matrix i.e. inner/kernel product of test data with
# Support Vectors
testvowel <- as.kernelMatrix(Kvowel[itest,itrain][,SVindex(svpvowel), drop=F])
yvowel <- predict(svpvowel, testvowel)
1-mean((yvowel-vowelTestLabels)^2)
@




\end{document}