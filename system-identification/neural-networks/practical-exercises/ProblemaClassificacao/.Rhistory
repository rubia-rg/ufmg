yhat <- (predict(rede,dna$inputsTest) >= 0.5)*1 # Teste
mse[i] <- mean(sqrt((yhat-dna$targetsTest)^2)) # MSE
}
meanrprop <- mean(mse)
sdrprop <- sd(mse)
# Chunk 2
rm(list=ls())
library("RSNNS")
library("mlbench")
data(DNA)
nIter <- 10
mse <- c()
for(i in 1:nIter){
dna <- DNA[sample(1:nrow(DNA),length(1:nrow(DNA))),1:ncol(DNA)]
dna[is.na(DNA)] <- 0
dnaValues <- data.matrix(DNA[,1:180])
dnaTargets <- decodeClassLabels(as.numeric(DNA$Class))
dna <- splitForTrainingAndTest(dnaValues, dnaTargets, ratio=0.30)
dna <- normTrainingAndTestSet(dna)
# Treino
rede<-mlp(dna$inputsTrain, dna$targetsTrain, size=5, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="BackpropWeightDecay",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
yhat <- (predict(rede,dna$inputsTest) >= 0.5)*1 # Teste
mse[i] <- mean(sqrt((yhat-dna$targetsTest)^2)) # MSE
}
meanbp <- mean(mse)
meanbp <- sd(mse)
# Chunk 3
rm(list=ls())
library("RSNNS")
library("mlbench")
data(DNA)
nIter <- 10
mse <- c()
for(i in 1:nIter){
dna <- DNA[sample(1:nrow(DNA),length(1:nrow(DNA))),1:ncol(DNA)]
dna[is.na(DNA)] <- 0
dnaValues <- data.matrix(DNA[,1:180])
dnaTargets <- decodeClassLabels(as.numeric(DNA$Class))
dna <- splitForTrainingAndTest(dnaValues, dnaTargets, ratio=0.30)
dna <- normTrainingAndTestSet(dna)
# Treino
rede<-mlp(dna$inputsTrain, dna$targetsTrain, size=5, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="SCG",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
yhat <- (predict(rede,dna$inputsTest) >= 0.5)*1 # Teste
mse[i] <- mean(sqrt((yhat-dna$targetsTest)^2)) # MSE
}
meanscg <- mean(mse)
sdscg <- sd(mse)
rm(list=ls())
library("RSNNS")
library("mlbench")
data(DNA)
summary(DNA)
rm(list=ls())
library("RSNNS")
library("mlbench")
data(DNA)
summary(DNA$Class)
rm(list=ls())
library("RSNNS")
library("mlbench")
data(DNA)
dim(DNA)
summary(DNA$Class)
rm(list=ls())
library("RSNNS")
library("mlbench")
data(DNA)
# Quantidade de exemplos e atributos #
dim(DNA[,1:180])
# Quantidade e resumo dos rótulos #
summary(DNA$Class)
rm(list=ls())
library("RSNNS")
library("mlbench")
data(DNA)
# Quantidade de exemplos e atributos #
dim(DNA[,1:180])
# Quantidade e resumo dos rótulos #
summary(DNA$Class)
install.packages("cvTools")
install.packages("MLmetrics")
rm(list=ls())
# Bibliotecas utilizadas #
library("RSNNS") # Função de treinamento
library("mlbench") # Dataset
library(MLmetrics) # Métrica
data(DNA) # Dataset DNA
nIter <- 10 # Número de iterações
for(i in 1:nIter){
# Amostragem de dados #
dna <- DNA[sample(1:nrow(DNA),length(1:nrow(DNA))),1:ncol(DNA)]
dna[is.na(DNA)] <- 0
dnaValues <- data.matrix(DNA[,1:180])
dnaTargets <- decodeClassLabels(as.numeric(DNA$Class))
# Divisão dos conjuntos de treino e teste #
dna <- splitForTrainingAndTest(dnaValues, dnaTargets, ratio=0.30)
dna <- normTrainingAndTestSet(dna)
# Treinamento
# RProp #
rprop<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="Rprop",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# SCG #
scg<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="SCG",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Backpropagation com Weight Decay #
bpwd<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3),
learnFunc="BackpropWeightDecay",
learnFuncParams=c(0.1, 0.1),
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Teste #
yrprop <- (predict(rprop,dna$inputsTest) >= 0.5)*1 # Teste
yscg <- (predict(scg,dna$inputsTest) >= 0.5)*1 # Teste
ybpwd <- (predict(bpwd,dna$inputsTest) >= 0.5)*1 # Teste
}
LogLoss(y_pred = yrprop, y_true = dna$inputsTest)
dim(yrprop)
dim(dna$inputsTest)
dim(dna$targetsTest)
LogLoss(y_pred = yrprop, y_true = dna$targetsTest)
??LogLoss
MultiLogLoss(y_pred = yrprop, y_true = dna$targetsTest)
MultiLogLoss(y_pred = scg, y_true = dna$targetsTest)
sgc
scg
MultiLogLoss(y_pred = yscg, y_true = dna$targetsTest)
MultiLogLoss(y_pred = yrprop, y_true = dna$targetsTest)
MultiLogLoss(y_pred = ybpwd, y_true = dna$targetsTest)
bpwd<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="BackpropWeightDecay",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
ybpwd <- (predict(bpwd,dna$inputsTest) >= 0.5)*1 # Teste
MultiLogLoss(y_pred = ybpwd, y_true = dna$targetsTest)
scg<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="SCG",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
yscg <- (predict(scg,dna$inputsTest) >= 0.5)*1 # Teste
MultiLogLoss(y_pred = yscg, y_true = dna$targetsTest)
MultiLogLoss(y_pred = ybpwd, y_true = dna$targetsTest)
MultiLogLoss(y_pred = yrprop, y_true = dna$targetsTest)
rprop<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="Rprop",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
scg<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="SCG",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
bpwd<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="BackpropWeightDecay",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
MultiLogLoss(y_pred = yscg, y_true = dna$targetsTest)
MultiLogLoss(y_pred = ybpwd, y_true = dna$targetsTest)
MultiLogLoss(y_pred = yrprop, y_true = dna$targetsTest)
table(yprob,dna$targetsTest)
table(yprop,dna$targetsTest)
table(yrprop,dna$targetsTest)
setwd("~/Dropbox/Study/UFMG/Classes/ELT075/Prática/ProblemaClassificacao")
source('~/Dropbox/Study/UFMG/Classes/ELT075/test.R', echo=TRUE)
install.packages("klaR")
install.packages("ROCR")
source('~/Dropbox/Study/UFMG/Classes/ELT075/test.R', echo=TRUE)
plot(x=NA, y=NA, xlim=c(0,1), ylim=c(0,1),
ylab='True Positive Rate',
xlab='False Positive Rate',
bty='n')
plot(x=NA, y=NA, xlim=c(0,1), ylim=c(0,1),
ylab='True Positive Rate',
xlab='False Positive Rate',
bty='n')
rm(list=ls())
library("RSNNS") # Função de treinamento
library("mlbench") # Dataset
library(ROCR)
library(klaR) # Métrica
data(DNA) # Dataset DNA
nIter <- 10 # Número de iterações
plot(x=NA, y=NA, xlim=c(0,1), ylim=c(0,1),
ylab='True Positive Rate',
xlab='False Positive Rate',
bty='n')
dna <- DNA[sample(1:nrow(DNA),length(1:nrow(DNA))),1:ncol(DNA)]
dna[is.na(DNA)] <- 0
dnaValues <- data.matrix(DNA[,1:180])
dnaTargets <- decodeClassLabels(as.numeric(DNA$Class))
dna <- splitForTrainingAndTest(dnaValues, dnaTargets, ratio=0.30)
dna <- normTrainingAndTestSet(dna)
rprop<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="Rprop",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
scg<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="SCG",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
bpwd<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="BackpropWeightDecay",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
yrprop <- predict(rprop, dnaTargets, type='raw')
yrprop <- predict(rprop, dna$inputsTest, type='raw')
score = yrprop$posterior[, 'TRUE']
yrprop
source('~/Dropbox/Study/UFMG/Classes/ELT075/test.R', echo=TRUE)
tyoe
type
testidx = which(1:length(iris[, 1]) %% 5 == 0)
length((textidx))
length((testidx))
rm(list=ls())
library("RSNNS") # Função de treinamento
library("mlbench") # Dataset
library(ROCR)
library(klaR) # Métrica
data(DNA) # Dataset DNA
nIter <- 10 # Número de iterações
plot(x=NA, y=NA, xlim=c(0,1), ylim=c(0,1),
ylab='True Positive Rate',
xlab='False Positive Rate',
bty='n')
dna <- DNA[sample(1:nrow(DNA),length(1:nrow(DNA))),1:ncol(DNA)]
dna[is.na(DNA)] <- 0
dnaValues <- data.matrix(DNA[,1:180])
dnaTargets <- decodeClassLabels(as.numeric(DNA$Class))
dna <- splitForTrainingAndTest(dnaValues, dnaTargets, ratio=0.30)
dna <- normTrainingAndTestSet(dna)
rprop<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="Rprop",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
??predict
source('~/Dropbox/Study/UFMG/Classes/ELT075/test.R', echo=TRUE)
nbprediction
nbmodel
yrprop <- predict(rprop, dna$inputsTest, type='raw')
source('~/.active-rstudio-document', echo=TRUE)
pred <- prediction(yrprop, dna$targetsTest)
pred
yrprop <- predict(rprop, dna$inputsTest, type='raw')
pred <- prediction(yrprop, dna$targetsTest)
yrperf <- performance(pred, "tpr", "fpr")
roc.x = unlist(yrperf@x.values)
roc.y = unlist(yrperf@y.values)
lines(roc.y ~ roc.x, col=4, lwd=2)
lines(roc.y ~ roc.x, col=c(1:3), lwd=2)
lines(roc.y ~ roc.x, col=c('blue','red','yellow'), lwd=2)
yrauc <- performance(pred, "auc")
yrauc <- performance(pred, "auc")
yrauc <- unlist(slot(yrauc, "y.values"))
yrauc
source('~/.active-rstudio-document', echo=TRUE)
install.packages("pROC")
source('~/.active-rstudio-document', echo=TRUE)
multiclass.roc(aSAH$gos6, aSAH$s100b, levels=c(3, 4, 5))
mcr <- multiclass.roc(aSAH$gos6, aSAH$s100b, levels=c(3, 4, 5))
mc
mcr
mcr$auc
auc <- mcr$auc
auc
auc^2
auc^8
library(mlbench)
data(DNA)
dna <- DNA[sample(1:nrow(DNA),length(1:nrow(DNA))),1:ncol(DNA)]
dna[is.na(DNA)] <- 0
View(aSAH)
dnaValues <- data.matrix(DNA[,1:180])
dnaTargets <- decodeClassLabels(as.numeric(DNA$Class))
multiclass.roc(dnaValues, dnaTargets, levels = c(1,2,3))
dna <- splitForTrainingAndTest(dnaValues, dnaTargets, ratio=0.30)
dna <- normTrainingAndTestSet(dna)
rprop<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="Rprop",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
scg<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="SCG",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
bpwd<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="BackpropWeightDecay",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
yrprop <- predict(rprop,dna$inputsTest)
yscg <- predict(scg,dna$inputsTest)
ybpwd <- predict(bpwd,dna$inputsTest)
yrpred <- prediction(yrprop, dna$targetsTest)
yrperf <- performance(yrpred, "tpr", "fpr")
yrprop <- predict(rprop, dna$inputsTest, type='raw')
pred <- prediction(yrprop, dna$targetsTest)
yrperf <- performance(pred, "tpr", "fpr")
roc.x = unlist(yrperf@x.values)
roc.y = unlist(yrperf@y.values)
lines(roc.y ~ roc.x, col=c('blue','red','yellow'), lwd=2)
yrauc <- performance(pred, "auc")
yrauc <- unlist(slot(yrauc, "y.values"))
multiclass.roc(yrprop, dnaTargets, levels = c(1,2,3))
multiclass.roc(yrprop, dna$targetsTest, levels = c(1,2,3))
multiclass.roc(aSAH$gos6, aSAH$s100b, levels=c(3, 4, 5))
multiclass.roc(aSAH$gos6, aSAH$s100b, percent=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
yrprop <- predict(rprop, dna$inputsTest, type='raw')
pred <- prediction(yrprop, dna$targetsTest)
yrperf <- performance(pred, "tpr", "fpr")
multiclass.roc(yrprop, pred, percent=TRUE)
pred
multiclass.roc(dna$targetsTest, yrprop, percent=TRUE)
multiclass.auc(dna$targetsTest, yrprop, percent=TRUE)
multiclass.roc(dna$targetsTest, yrprop, percent=TRUE)
rprop <- multiclass.roc(dna$targetsTest, yrprop, percent=TRUE)
rprop$auc
rm(list=ls())
# Bibliotecas utilizadas #
library("RSNNS") # Função de treinamento
library("mlbench") # Dataset
library(ROCR) # Metrica
data(DNA) # Dataset DNA
nIter <- 10 # Número de iterações
aucrprop <- c()
aucscg <- c()
aucbpwd <- c()
for(i in 1:nIter){
# Amostragem de dados #
dna <- DNA[sample(1:nrow(DNA),length(1:nrow(DNA))),1:ncol(DNA)]
dna[is.na(DNA)] <- 0
dnaValues <- data.matrix(DNA[,1:180])
dnaTargets <- decodeClassLabels(as.numeric(DNA$Class))
# Divisão dos conjuntos de treino e teste #
dna <- splitForTrainingAndTest(dnaValues, dnaTargets, ratio=0.30)
dna <- normTrainingAndTestSet(dna)
# Treinamento
# RProp #
rprop<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="Rprop",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# SCG #
scg<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="SCG",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Backpropagation com Weight Decay #
bpwd<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="BackpropWeightDecay",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Teste #
yrprop <- predict(rprop,dna$inputsTest)
yscg <- predict(scg,dna$inputsTest)
ybpwd <- predict(bpwd,dna$inputsTest)
# ROC #
rocrprop <- multiclass.roc(dna$targetsTest, yrprop)
rocscg <- multiclass.roc(dna$targetsTest, yscg)
rocbpwd <- multiclass.roc(dna$targetsTest, ybpwd)
# AUC #
aucrprop[i] <- rocrprop$auc
aucscg[i] <- rocscg$auc
aucbpwd[i] <- rocbpwd$auc
}
matrix(c(mean(aucrprop),mean(aucscg),mean(aucbpwd)),c(sd(aucrprop),mean(aucscg),mean(aucbpwd)),ncol=2)
matrix(c(mean(aucrprop),mean(aucscg),mean(aucbpwd)),c(sd(aucrprop),sd(aucscg),sd(aucbpwd)))
cbind(c(mean(aucrprop),mean(aucscg),mean(aucbpwd)),c(sd(aucrprop),sd(aucscg),sd(aucbpwd)))
cbind(c(mean(aucrprop)*100,mean(aucscg),mean(aucbpwd)),c(sd(aucrprop),sd(aucscg),sd(aucbpwd)))
results <- cbind(c(mean(aucrprop),mean(aucscg),mean(aucbpwd)),c(sd(aucrprop),sd(aucscg),sd(aucbpwd)))
colnames(results, do.NULL = TRUE, prefix = "col")
results
colnames(results) <- c('Média','Desvio-padrão')
results
colnames(results) <- c('Média','Std.')
results
results <- cbind(c(mean(aucrprop),mean(aucscg),mean(aucbpwd)),c(sd(aucrprop),sd(aucscg),sd(aucbpwd)))
colnames(results) <- c('Média','Std.')
rownames(results) <- c('Rprop','SCG','Backpropagation w/ WD')
results
results <- cbind(c(mean(aucrprop),mean(aucscg),mean(aucbpwd)),c(sd(aucrprop),sd(aucscg),sd(aucbpwd)))
results <- round(results,2)
colnames(results) <- c('Média','Std.')
rownames(results) <- c('Rprop','SCG','Backpropagation w/ WD')
results
results <- cbind(c(mean(aucrprop),mean(aucscg),mean(aucbpwd)),c(sd(aucrprop),sd(aucscg),sd(aucbpwd)))
results <- round(results,4)
colnames(results) <- c('Média','Std.')
rownames(results) <- c('Rprop','SCG','Backpropagation w/ WD')
results
results <- cbind(c(mean(aucrprop),mean(aucscg),mean(aucbpwd))*100,c(sd(aucrprop),sd(aucscg),sd(aucbpwd))*100)
results <- round(results,4)
colnames(results) <- c('Média','Std.')
rownames(results) <- c('Rprop','SCG','Backpropagation w/ WD')
results
results <- cbind(c(mean(aucrprop),mean(aucscg),mean(aucbpwd))*100,c(sd(aucrprop),sd(aucscg),sd(aucbpwd))*100)
results <- round(results,2)
colnames(results) <- c('Média','Std.')
rownames(results) <- c('Rprop','SCG','Backpropagation w/ WD')
results
results <- cbind(c(mean(aucrprop),mean(aucscg),mean(aucbpwd))*100,c(sd(aucrprop),sd(aucscg),sd(aucbpwd))*100)
results <- round(results,2)
colnames(results) <- c('Média (%)','Std. (%)')
rownames(results) <- c('Rprop','SCG','Backpropagation w/ WD')
results
results <- cbind(c(mean(aucrprop),mean(aucscg),mean(aucbpwd))*100,c(sd(aucrprop),sd(aucscg),sd(aucbpwd))*100)
results <- round(results,2)
colnames(results) <- c('Média (%)','Std. (%)')
rownames(results) <- c('RProp','SCG','Backpropagation w/ W.D.')
results
results <- cbind(c(mean(aucrprop),mean(aucscg),mean(aucbpwd))*100,c(sd(aucrprop),sd(aucscg),sd(aucbpwd))*100)
results <- round(results,2)
colnames(results) <- c('Média (%)','Std. (%)')
rownames(results) <- c('RProp','SCG','Backpropagation w/ W.D.')
results
