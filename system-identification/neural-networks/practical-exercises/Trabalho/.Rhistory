ylim=c(0,1), xlab ='x_1', ylab='x_2',
sub='Figura 2: Separadores gerados na camada escondida')
par(new=T)
plot(X[2,1], X[2,2], col='blue', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(X[3,1], X[3,2], col='blue',type='p',xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(X[4,1], X[4,2], col='red', type='p', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
################################################
# Plot dos separadores gerados na camada escondida  #
par(new=T)
plot(xt, y1, col='red', type='l', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
par(new=T)
plot(xt, y2, col='red', type='l', xlim=c(0,1),
ylim=c(0,1), xlab='', ylab='', sub='')
wine <- read.csv(file="wine.csv",header=FALSE,sep=",")
wineTargets <- as.numeric(wine[,1])
wine <- wine[,-1]
wineV1 <- wine[which(wineTargets==1),]
wineV2 <- wine[which(wineTargets==2),]
wineT1 <- wineTargets[which(wineTargets==1)]
wineT2 <- wineTargets[which(wineTargets==2)]
train1 <- sample(nrow(wineV1),size=(nrow(wineV1)*0.7))
train2 <- sample(nrow(wineV2),size=(nrow(wineV2)*0.7))
wineTrain <- rbind(wineV1[train1,],wineV2[train2,])
wineTrainLabels <- c(wineT1[train1],wineT2[train2])
wineTest <- rbind(wineV1[-train1,],wineV2[-train2,])
wineTestLabels <- c(wineT1[-train1],wineT2[-train2])
wineValues <- rbind(wineTrain, wineTest)
itrain <- 1:nrow(wineTrain)
itest <- (1:nrow(wineValues))[-itrain]
clwine <- cmeans(wineValues,2)
Kwine <- proximityK(clwine$membership, clwine$cluster)
Kwine <- as.matrix(Kwine)
svpwine <- ksvm(Kwine[itrain,itrain], wineTrainLabels, kernel='matrix', type="C-svc")
# test data
# test kernel matrix i.e. inner/kernel product of test data with
# Support Vectors
testwine <- as.kernelMatrix(Kwine[itest,itrain][,SVindex(svpwine), drop=F])
ywine <- predict(svpwine, testwine)
1-mean((ywine-wineTestLabels)^2)
data("iris")
irisTargets <- as.numeric(iris$Species)
irisTargets[which(irisTargets==2)] <- 1
irisTargets[which(irisTargets==3)] <- 2
iris <- iris[,-5]
irisV1 <- iris[which(irisTargets==1),]
irisV2 <- iris[which(irisTargets==2),]
irisT1 <- irisTargets[which(irisTargets==1)]
irisT2 <- irisTargets[which(irisTargets==2)]
train1 <- sample(nrow(irisV1),size=(nrow(irisV1)*0.7))
train2 <- sample(nrow(irisV2),size=(nrow(irisV2)*0.7))
irisTrain <- rbind(irisV1[train1,],irisV2[train2,])
irisTrainLabels <- c(irisT1[train1],irisT2[train2])
irisTest <- rbind(irisV1[-train1,],irisV2[-train2,])
irisTestLabels <- c(irisT1[-train1],irisT2[-train2])
irisValues <- rbind(irisTrain, irisTest)
itrain <- 1:nrow(irisTrain)
itest <- (1:nrow(irisValues))[-itrain]
cliris <- cmeans(irisValues,2)
Kiris <- proximityK(cliris$membership, cliris$cluster)
Kiris <- as.matrix(Kiris)
svpiris <- ksvm(Kiris[itrain,itrain], irisTrainLabels, kernel='matrix', type="C-svc")
# test data
# test kernel matrix i.e. inner/kernel product of test data with
# Support Vectors
testiris <- as.kernelMatrix(Kiris[itest,itrain][,SVindex(svpiris), drop=F])
yiris <- predict(svpiris, testiris)
1-mean((yiris-irisTestLabels)^2)
pop <- read.table(file="pop_failures.dat",header=TRUE)
popTargets <- as.numeric(pop[,21])
pop <- pop[,-21]
popV1 <- pop[which(popTargets==0),]
popV2 <- pop[which(popTargets==1),]
popT1 <- popTargets[which(popTargets==0)]
popT2 <- popTargets[which(popTargets==1)]
train1 <- sample(nrow(popV1),size=(nrow(popV1)*0.7))
train2 <- sample(nrow(popV2),size=(nrow(popV2)*0.7))
popTrain <- rbind(popV1[train1,],popV2[train2,])
popTrainLabels <- c(popT1[train1],popT2[train2])
popTest <- rbind(popV1[-train1,],popV2[-train2,])
popTestLabels <- c(popT1[-train1],popT2[-train2])
popValues <- rbind(popTrain, popTest)
itrain <- 1:nrow(popTrain)
itest <- (1:nrow(popValues))[-itrain]
clpop <- cmeans(popValues,2)
Kpop <- proximityK(clpop$membership, clpop$cluster)
Kpop <- as.matrix(Kpop)
svppop <- ksvm(Kpop[itrain,itrain], popTrainLabels, kernel='matrix', type="C-svc")
# test data
# test kernel matrix i.e. inner/kernel product of test data with
# Support Vectors
testpop <- as.kernelMatrix(Kpop[itest,itrain][,SVindex(svppop), drop=F])
ypop <- predict(svppop, testpop)
1-mean((ypop-popTestLabels)^2)
vowel <- read.table(file="vowel-context.data",header=FALSE)
vowelTargets <- as.numeric(vowel[,1])
vowel <- vowel[,-1]
vowelV1 <- vowel[which(vowelTargets==0),]
vowelV2 <- vowel[which(vowelTargets==1),]
vowelT1 <- vowelTargets[which(vowelTargets==0)]
vowelT2 <- vowelTargets[which(vowelTargets==1)]
train1 <- sample(nrow(vowelV1),size=(nrow(vowelV1)*0.7))
train2 <- sample(nrow(vowelV2),size=(nrow(vowelV2)*0.7))
vowelTrain <- rbind(vowelV1[train1,],vowelV2[train2,])
vowelTrainLabels <- c(vowelT1[train1],vowelT2[train2])
vowelTest <- rbind(vowelV1[-train1,],vowelV2[-train2,])
vowelTestLabels <- c(vowelT1[-train1],vowelT2[-train2])
vowelValues <- rbind(vowelTrain, vowelTest)
itrain <- 1:nrow(vowelTrain)
itest <- (1:nrow(vowelValues))[-itrain]
clvowel <- cmeans(vowelValues,2)
Kvowel <- proximityK(clvowel$membership, clvowel$cluster)
Kvowel <- as.matrix(Kvowel)
svpvowel <- ksvm(Kvowel[itrain,itrain], vowelTrainLabels, kernel='matrix', type="C-svc")
# test data
# test kernel matrix i.e. inner/kernel product of test data with
# Support Vectors
testvowel <- as.kernelMatrix(Kvowel[itest,itrain][,SVindex(svpvowel), drop=F])
yvowel <- predict(svpvowel, testvowel)
1-mean((yvowel-vowelTestLabels)^2)
clPairs(BC,BC[,11])
data("BreastCancer")
BC <- BreastCancer[,2:11]
clPairs(BC,BC[,11])
clPairs(BreastCancer,BreastCancer$Class)
clPairs(BreastCancer[,-11],as.numeric(BreastCancer$Class))
clPairs(BreastCancer,as.numeric(BreastCancer$Class))
BC <- data.matrix(BreastCancer)
clPairs(BC)
clPairs(BC,BC$Class)
BC <- data.matrix(BreastCancer)
clPairs(BC,BC[,11])
wine <- read.csv(file="wine.csv",header=FALSE,sep=",")
clPairs(wine,wine[,1])
wineTargets[which(wineTargets==3),] <- 2
wineTargets[which(wineTargets==3)] <- 2
wine <- read.csv(file="wine.csv",header=FALSE,sep=",")
wineTargets <- as.numeric(wine[,1])
wine[which(wineTargets==3)] <- 2
wine <- read.csv(file="wine.csv",header=FALSE,sep=",")
wineTargets <- as.numeric(wine[,1])
wine <- read.csv(file="wine.csv",header=FALSE,sep=",")
wineTargets <- as.numeric(wine[,1])
wine[which(wineTargets==3),] <- 2
clPairs(wine,wine[,1])
clPairs(iris,.~Species)
data("iris")
clPairs(iris,.~Species)
irisTargets <- as.numeric(iris$Species)
irisTargets[which(irisTargets==2)] <- 1
iris[which(irisTargets==3),] <- 2
data("iris")
irisTargets <- as.numeric(iris$Species)
irisTargets[which(irisTargets==2)] <- 1
iris[which(irisTargets==3),] <- 2
data("iris")
irisTargets <- as.numeric(iris$Species)
data("iris")
irisTargets <- as.numeric(iris$Species)
irisTargets[which(irisTargets==2)] <- 1
iris[which(irisTargets==3),5] <- 2
data("iris")
data("iris")
irisTargets <- as.numeric(iris$Species)
irisTargets[which(irisTargets==2)] <- 1
iris[which(irisTargets==3),5] <- 2
iris[which(irisTargets==3),5] <- 2
data("iris")
irisTargets <- as.numeric(iris$Species)
irisTargets[which(irisTargets==2)] <- 1
iris[which(irisTargets==3),5] <- 2
clPairs(iris,iris$Species)
data("iris")
clPairs(iris,iris$Species)
iris <- data.matrix(iris)
clPairs(iris,iris$Species)
data("iris")
iris <- data.matrix(iris)
clPairs(iris,iris[,5])
clPairs(pop,pop[,21])
pop <- read.table(file="pop_failures.dat",header=TRUE)
clPairs(pop,pop[,21])
clPairs(vowel,vowel[,1])
data(DNA)
rm(list=ls())
# Bibliotecas utilizadas #
library("RSNNS") # Função de treinamento
library("mlbench") # Dataset
library(pROC) # Metrica
data(DNA) # Dataset DNA
nIter <- 10 # Número de iterações
aucrpropdna <- c()
aucscgdna <- c()
aucbpwddna <- c()
for(i in 1:nIter){
# Amostragem de dados #
dna <- DNA[sample(1:nrow(DNA),length(1:nrow(DNA))),1:ncol(DNA)]
dna[is.na(dna)] <- 0
dnaValues <- data.matrix(dna[,1:180])
dnaTargets <- decodeClassLabels(as.numeric(dna[,181]))
# Divisão dos conjuntos de treino e teste #
dna <- splitForTrainingAndTest(dnaValues, dnaTargets, ratio=0.30)
dna <- normTrainingAndTestSet(dna)
# Treinamento
# RProp #
rprop<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="Rprop",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# SCG #
scg<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="SCG",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Backpropagation com Weight Decay #
bpwd<-mlp(dna$inputsTrain, dna$targetsTrain, size=2, maxit=40,
inputsTest=dna$inputsTest, targetsTest=dna$targetsTest,
initFunc="Randomize_Weights",
learnFunc="BackpropWeightDecay",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Teste #
yrprop <- predict(rprop,dna$inputsTest)
yscg <- predict(scg,dna$inputsTest)
ybpwd <- predict(bpwd,dna$inputsTest)
# ROC #
rocrprop <- multiclass.roc(dna$targetsTest, yrprop)
rocscg <- multiclass.roc(dna$targetsTest, yscg)
rocbpwd <- multiclass.roc(dna$targetsTest, ybpwd)
# AUC #
aucrpropdna[i] <- rocrprop$auc
aucscgdna[i] <- rocscg$auc
aucbpwddna[i] <- rocbpwd$auc
}
mean(aucbpwddna)
sd(aucbpwddna)
mean(aucrpropdna)
sd(aucrpropdna)
mean(aucscgdna)
sd(aucscgdna)
rm(list=ls())
# Bibliotecas utilizadas #
library("RSNNS") # Função de treinamento
library(pROC) # Metrica
SPAM <- read.csv(file="spambase.data",header=FALSE,sep=',')
nIter <- 10 # Número de iterações
aucrpropspam <- c()
aucscgspam <- c()
aucbpwdspam <- c()
for(i in 1:nIter){
# Amostragem de dados #
spam <- SPAM[sample(1:nrow(SPAM),length(1:nrow(SPAM))),1:ncol(SPAM)]
spam[is.na(spam)] <- 0
spamValues <- data.matrix(spam[,1:57])
spamTargets <- decodeClassLabels(as.numeric(spam[,58]))
# Divisão dos conjuntos de treino e teste #
spam <- splitForTrainingAndTest(spamValues, spamTargets, ratio=0.30)
spam <- normTrainingAndTestSet(spam)
# Treinamento
# RProp #
rprop<-mlp(spam$inputsTrain, spam$targetsTrain, size=2, maxit=40,
inputsTest=spam$inputsTest, targetsTest=spam$targetsTest,
initFunc="Randomize_Weights",
learnFunc="Rprop",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# SCG #
scg<-mlp(spam$inputsTrain, spam$targetsTrain, size=2, maxit=40,
inputsTest=spam$inputsTest, targetsTest=spam$targetsTest,
initFunc="Randomize_Weights",
learnFunc="SCG",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Backpropagation com Weight Decay #
bpwd<-mlp(spam$inputsTrain, spam$targetsTrain, size=2, maxit=40,
inputsTest=spam$inputsTest, targetsTest=spam$targetsTest,
initFunc="Randomize_Weights",
learnFunc="BackpropWeightDecay",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Teste #
yrprop <- predict(rprop,spam$inputsTest)
yrprop <- ifelse(yrprop[,1] >= yrprop[,2],1,0)
yscg <- (predict(scg,spam$inputsTest)>=0.5)*1
yscg <- ifelse(yscg[,1] >= yscg[,2],1,0)
ybpwd <- (predict(bpwd,spam$inputsTest)>=0.5)*1
ybpwd <- ifelse(ybpwd[,1] >= ybpwd[,2],1,0)
targets <- ifelse(spam$targetsTest[,1] >= spam$targetsTest[,2],1,0)
# ROC #
rocrprop <- roc(targets, yrprop)
rocscg <- roc(targets, yscg)
rocbpwd <- roc(targets, ybpwd)
# AUC #
aucrpropspam[i] <- auc(rocrprop)
aucscgspam[i] <- auc(rocscg)
aucbpwdspam[i] <- auc(rocbpwd)
}
setwd("~/Dropbox/Study/UFMG/Classes/ELT075/Prática/Trabalho")
rm(list=ls())
# Bibliotecas utilizadas #
library("RSNNS") # Função de treinamento
library(pROC) # Metrica
SPAM <- read.csv(file="spambase.data",header=FALSE,sep=',')
nIter <- 10 # Número de iterações
aucrpropspam <- c()
aucscgspam <- c()
aucbpwdspam <- c()
for(i in 1:nIter){
# Amostragem de dados #
spam <- SPAM[sample(1:nrow(SPAM),length(1:nrow(SPAM))),1:ncol(SPAM)]
spam[is.na(spam)] <- 0
spamValues <- data.matrix(spam[,1:57])
spamTargets <- decodeClassLabels(as.numeric(spam[,58]))
# Divisão dos conjuntos de treino e teste #
spam <- splitForTrainingAndTest(spamValues, spamTargets, ratio=0.30)
spam <- normTrainingAndTestSet(spam)
# Treinamento
# RProp #
rprop<-mlp(spam$inputsTrain, spam$targetsTrain, size=2, maxit=40,
inputsTest=spam$inputsTest, targetsTest=spam$targetsTest,
initFunc="Randomize_Weights",
learnFunc="Rprop",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# SCG #
scg<-mlp(spam$inputsTrain, spam$targetsTrain, size=2, maxit=40,
inputsTest=spam$inputsTest, targetsTest=spam$targetsTest,
initFunc="Randomize_Weights",
learnFunc="SCG",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Backpropagation com Weight Decay #
bpwd<-mlp(spam$inputsTrain, spam$targetsTrain, size=2, maxit=40,
inputsTest=spam$inputsTest, targetsTest=spam$targetsTest,
initFunc="Randomize_Weights",
learnFunc="BackpropWeightDecay",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Teste #
yrprop <- predict(rprop,spam$inputsTest)
yrprop <- ifelse(yrprop[,1] >= yrprop[,2],1,0)
yscg <- (predict(scg,spam$inputsTest)>=0.5)*1
yscg <- ifelse(yscg[,1] >= yscg[,2],1,0)
ybpwd <- (predict(bpwd,spam$inputsTest)>=0.5)*1
ybpwd <- ifelse(ybpwd[,1] >= ybpwd[,2],1,0)
targets <- ifelse(spam$targetsTest[,1] >= spam$targetsTest[,2],1,0)
# ROC #
rocrprop <- roc(targets, yrprop)
rocscg <- roc(targets, yscg)
rocbpwd <- roc(targets, ybpwd)
# AUC #
aucrpropspam[i] <- auc(rocrprop)
aucscgspam[i] <- auc(rocscg)
aucbpwdspam[i] <- auc(rocbpwd)
}
mean(aucrpropspam)
sd(aucrpropspam)
mean(aucscgspam)
sd(aucscgspam)
mean(aucbpwdspam)
sd(aucbpwdspam)
library(kernlab)
library(caret)
library(RSNNS)
library(pROC)
library(ggplot2)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Leitura dos dados #
column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
titanic <- read.csv(file="train.csv",header=TRUE,sep=",",colClasses=column.types,na.strings=c('NA',''))
psexSurvived <- ggplot(titanic, aes(x=Survived, fill=Sex)) + geom_bar(color='black')
ggplot(titanic, aes(x=Survived, fill=Sex)) + geom_bar(color='black')
ggplot(titanic[-which(is.na(titanic$Age)), ], aes(x=Age, fill=Survived)) + geom_density(alpha=0.6) + facet_grid(.~Sex)
ggplot(titanic, aes(x=Fare, fill=Survived)) + geom_histogram() +
facet_grid(.~Pclass)
# Feature Engineering 1: Name #
# Title
titanic$Title <- sapply(titanic$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
titanic$Title[titanic$Title %in% c(' Capt', ' Don', ' Major', ' Sir', ' Jonkheer')] <- 'Sir'
titanic$Title[titanic$Title %in% c(' Mme', ' Mlle')] <- 'Mme'
titanic$Title[titanic$Title %in% c(' Dona', ' Lady', ' the Countess',' Ms')] <- 'Lady'
titanic$Title <- factor(titanic$Title)
# Surname
titanic$Surname <- sapply(titanic$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
famSize <- data.frame(table(titanic$Surname))
smallFam <- famSize[famSize$Freq <= 2,1]
titanic$Surname[titanic$Surname %in% smallFam] <- 'Small'
titanic$Surname <- factor(titanic$Surname)
# Feature Engineering 2: Fare #
# Removing NAs
titanic$Fare[is.na(titanic$Fare)] <- mean(titanic$Fare,na.rm = TRUE)
# Fare Per Person
titanic$FarePP <- sapply(titanic$Fare, FUN=function(x) {ifelse(titanic$SibSp[1]+titanic$Parch[1],x/(titanic$SibSp[1]+titanic$Parch[1]+1),x)})
# Feature Engineering 3: Ticket #
require(stringr)
titanic$Ticket <- sapply(titanic$Ticket, FUN=function(x) {strsplit(str_replace_all(x,' ','.'),'[.]')[[1]][length(strsplit(str_replace_all(x,' ','.'),'[.]')[[1]])]})
# Feature Engineering 4: Cabin #
titanic$Cabin[is.na(titanic$Cabin)] <- 'Unknown'
titanic$Cabin <- sapply(titanic$Cabin, FUN=function(x) {strsplit(x,'')[[1]][1]})
titanic$Cabin <- factor(titanic$Cabin)
# Feature Engineering 5: Age #
ageByTitle <- aggregate(titanic$Age[!is.na(titanic$Age)],list(titanic$Title[!is.na(titanic$Age)]),mean)
titanic$Age[is.na(titanic$Age)] <- sapply(titanic$Title[is.na(titanic$Age)], FUN=function(y) {ageByTitle$x[which(list(y)[[1]][1] == ageByTitle$Group.1)]})
# Feature Engineering 6: Embarked #
titanic$Embarked[is.na(titanic$Embarked)] <- 'S'
# Treinamento e Teste #
TITANIC <- titanic[,c(-1,-4,-9)]
nIter <- 10 # Número de iterações
aucrproptitanic <- c()
aucscgtitanic <- c()
aucbpwdtitanic <- c()
for(i in 1:nIter){
# Amostragem de dados #
titanic <- TITANIC[sample(1:nrow(TITANIC),length(1:nrow(TITANIC))),1:ncol(TITANIC)]
titanicValues <- data.matrix(titanic[,-1])
titanicTargets <- decodeClassLabels(as.numeric(titanic[,1]))
# Divisão dos conjuntos de treino e teste #
titanic <- splitForTrainingAndTest(titanicValues, titanicTargets, ratio=0.30)
titanic <- normTrainingAndTestSet(titanic)
# Treinamento
# RProp #
rprop<-mlp(titanic$inputsTrain, titanic$targetsTrain, size=2, maxit=40,
inputsTest=titanic$inputsTest, targetsTest=titanic$targetsTest,
initFunc="Randomize_Weights",
learnFunc="Rprop",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# SCG #
scg<-mlp(titanic$inputsTrain, titanic$targetsTrain, size=2, maxit=40,
inputsTest=titanic$inputsTest, targetsTest=titanic$targetsTest,
initFunc="Randomize_Weights",
learnFunc="SCG",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Backpropagation com Weight Decay #
bpwd<-mlp(titanic$inputsTrain, titanic$targetsTrain, size=2, maxit=40,
inputsTest=titanic$inputsTest, targetsTest=titanic$targetsTest,
initFunc="Randomize_Weights",
learnFunc="BackpropWeightDecay",
updateFunc="Topological_Order",
updateFuncParams=c(0),
hiddenActFunc="Act_Logistic",
shufflePatterns=TRUE, linOut=FALSE)
# Teste #
yrprop <- predict(rprop,titanic$inputsTest)
yrprop <- ifelse(yrprop[,1] >= yrprop[,2],1,0)
yscg <- (predict(scg,titanic$inputsTest)>=0.5)*1
yscg <- ifelse(yscg[,1] >= yscg[,2],1,0)
ybpwd <- (predict(bpwd,titanic$inputsTest)>=0.5)*1
ybpwd <- ifelse(ybpwd[,1] >= ybpwd[,2],1,0)
targets <- ifelse(titanic$targetsTest[,1] >= titanic$targetsTest[,2],1,0)
# ROC #
rocrprop <- roc(targets, yrprop)
rocscg <- roc(targets, yscg)
rocbpwd <- roc(targets, ybpwd)
# AUC #
aucrproptitanic[i] <- auc(rocrprop)
aucscgtitanic[i] <- auc(rocscg)
aucbpwdtitanic[i] <- auc(rocbpwd)
}
mean(aucrproptitanic)
mean(aucscgtitanic)
mean(aucscgtitanic)
mean(aucbpwdtitanic)
sd(aucbpwdtitanic)
sd(aucrproptitanic)
sd(aucscgtitanic)
