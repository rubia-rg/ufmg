minseq <- 0
maxseq <- 6
###########################
# Gerando dados amostrados das distribuições m1=(2,2)', m2=(4,4)' #
c1 <- matrix(rnorm(N*2),ncol=2)*0.5+c(2,2)
c2 <- matrix(rnorm(N*2),ncol=2)*0.5+c(4,4)
plot(c1[,1], c1[,2], col='red', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='x',ylab='y')
par(new=T)
plot(c2[,1], c2[,2], col='blue', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='',ylab='')
############################
# Estimando parâmetros das densidades #
# Médias
m11 <- mean(c1[,1]) # C1
m12 <- mean(c1[,2]) # C1
m21 <- mean(c2[,1]) # C2
m22 <- mean(c2[,2]) # C2
# Desvios pradão
s11 <- sd(c1[,1]) # C1
s12 <- sd(c1[,2]) # C1
s21 <- sd(c2[,1]) # C2
s22 <- sd(c2[,2]) # C2
# Coeficientes de correlação
cr1 <- cor(c1[,1],c1[,2])
cr2 <- cor(c2[,1],c2[,2])
############################
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
############################
ci <- 0
for (i in seqi)
{
cj <- 0
ci<- ci + 1
for (j in seqj)
{
cj <- cj + 1
M1[ci,cj]<-fnormal2var(i,j,m11,m12,s11,s12,cr1)
M2[ci,cj]<-fnormal2var(i,j,m21,m22,s21,s22,cr2)
}
}
classx<-0.7*(M1 >= M2) #limiar
contour2D(M1,seqi,seqj)
par(new=T)
contour2D(M2, seqi,seqj)
persp3D(seqi,seqj,M1,clim=c(0,0.8),colkey=T)
persp3D(seqi,seqj,M2,clim=c(0,0.8),add=T,colkey=T)
persp3D(seqi,seqj,classx,clim=c(1.5,0), zlim=c(0,2),add=T,colkey=F)
library('plot3D')
library('MASS')
rm(list=ls())
########################################
# Funções #
fnormal2var <- function(x,y,mx,my,sx,sy,cr){ (1/(2*pi*sx*sy*sqrt(1-cr*cr)))*exp((-0.5*(1-cr*cr))*((((x-mx)^2)/(sx^2))+(((y-my)^2)/(sy^2))-(2*cr*((x-mx)*(y-my))/sy*sx)))}
########################################
# Parâmetros iniciais #
N <- 100
minseq <- 0
maxseq <- 6
########################################
# Gerando dados amostrados das distribuições m1=(2,2)', m2=(4,4)' #
c1 <- matrix(rnorm(N*2),ncol=2)*0.5+c(2,2)
c2 <- matrix(rnorm(N*2),ncol=2)*0.5+c(4,4)
plot(c1[,1], c1[,2], col='red', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='x',ylab='y')
par(new=T)
plot(c2[,1], c2[,2], col='blue', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='',ylab='')
########################################
# Estimando parâmetros das densidades #
# Médias
m11 <- mean(c1[,1]) # C1
m12 <- mean(c1[,2]) # C1
m21 <- mean(c2[,1]) # C2
m22 <- mean(c2[,2]) # C2
# Desvios pradão
s11 <- sd(c1[,1]) # C1
s12 <- sd(c1[,2]) # C1
s21 <- sd(c2[,1]) # C2
s22 <- sd(c2[,2]) # C2
# Coeficientes de correlação
cr1 <- cor(c1[,1],c1[,2])
cr2 <- cor(c2[,1],c2[,2])
########################################
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
########################################
# Estimando a densidade de C1 e C2 #
ci <- 0
for (i in seqi)
{
cj <- 0
ci<- ci + 1
for (j in seqj)
{
cj <- cj + 1
M1[ci,cj]<-fnormal2var(i,j,m11,m12,s11,s12,cr1)
M2[ci,cj]<-fnormal2var(i,j,m21,m22,s21,s22,cr2)
}
}
# Superfície de separação #
classx<-0.7*(M1 >= M2)
contour2D(M1,seqi,seqj)
par(new=T)
contour2D(M2, seqi,seqj)
persp3D(seqi,seqj,M1,clim=c(0,0.8),colkey=T)
persp3D(seqi,seqj,M2,clim=c(0,0.8),add=T,colkey=T)
persp3D(seqi,seqj,classx,clim=c(1.5,0), zlim=c(0,2),add=T,colkey=F)
####################################
# Perceptron  #
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M <- matrix(1,nrow =length(seqi),ncol=length(seqj))
# Percorrer o espaço e gerar a saída #
ci <- 0
for (i in seqi)
{
ci <- ci+1
cj <- 0
for (j in seqj)
{
cj <- cj + 1
xt <- c(i,j,1)
M[ci,cj] <- 1*((t(w) %*% xt) >= 0)
}
}
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M)
####################################
# Perceptron  #
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M <- matrix(1,nrow =length(seqi),ncol=length(seqj))
# Percorrer o espaço e gerar a saída #
ci <- 0
for (i in seqi)
{
ci <- ci+1
cj <- 0
for (j in seqj)
{
cj <- cj + 1
xt <- c(i,j,1)
M[ci,cj] <- 1*((t(w) %*% xt) >= 0)
}
}
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M)
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq), xlab='',ylab='')
par(new=T)
curve(-x+6,0,6, col='orange', xlab='', ylab='')
####################################
# Perceptron  #
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M <- matrix(1,nrow =length(seqi),ncol=length(seqj))
# Percorrer o espaço e gerar a saída #
ci <- 0
for (i in seqi)
{
ci <- ci+1
cj <- 0
for (j in seqj)
{
cj <- cj + 1
xt <- c(i,j,1)
M[ci,cj] <- 1*((t(w) %*% xt) >= 0)
}
}
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M)
rm(list=ls())
library('plot3D')
####################################
# Parâmetros #
N <- 100
minseq <- 0
maxseq <- 6
####################################
# Vetor de pesos #
w <- c(1,1,-6)
# Gerando dados amostrados das distribuições m1=(2,2)', m2=(4,4)' #
xc1 <- matrix(rnorm(N*2),ncol=2)*0.5+c(2,2)
xc2 <- matrix(rnorm(N*2),ncol=2)*0.5+c(4,4)
####################################
# Plot dos dados #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq), xlab='x_1', ylab='x_2')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq), xlab='', ylab='')
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq), xlab='',ylab='')
par(new=T)
curve(-x+6,0,6, col='orange', xlab='', ylab='')
####################################
# Perceptron  #
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M <- matrix(1,nrow =length(seqi),ncol=length(seqj))
# Percorrer o espaço e gerar a saída #
ci <- 0
for (i in seqi)
{
ci <- ci+1
cj <- 0
for (j in seqj)
{
cj <- cj + 1
xt <- c(i,j,1)
M[ci,cj] <- 1*((t(w) %*% xt) >= 0)
}
}
# Resposta em R2 #
plot(xc1[,1], xc1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x_1',ylab='x_2')
par(new=T)
plot(xc2[,1], xc2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour(seqi,seqj,M)
plot(c1[,1], c1[,2], col='red', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='x',ylab='y')
library('plot3D')
library('MASS')
rm(list=ls())
########################################
# Funções #
fnormal2var <- function(x,y,mx,my,sx,sy,cr){ (1/(2*pi*sx*sy*sqrt(1-cr*cr)))*exp((-0.5*(1-cr*cr))*((((x-mx)^2)/(sx^2))+(((y-my)^2)/(sy^2))-(2*cr*((x-mx)*(y-my))/sy*sx)))}
########################################
# Parâmetros iniciais #
N <- 100
minseq <- 0
maxseq <- 6
########################################
# Gerando dados amostrados das distribuições m1=(2,2)', m2=(4,4)' #
c1 <- matrix(rnorm(N*2),ncol=2)*0.5+c(2,2)
c2 <- matrix(rnorm(N*2),ncol=2)*0.5+c(4,4)
plot(c1[,1], c1[,2], col='red', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='x',ylab='y')
par(new=T)
plot(c2[,1], c2[,2], col='blue', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='',ylab='')
########################################
# Estimando parâmetros das densidades #
# Médias
m11 <- mean(c1[,1]) # C1
m12 <- mean(c1[,2]) # C1
m21 <- mean(c2[,1]) # C2
m22 <- mean(c2[,2]) # C2
# Desvios pradão
s11 <- sd(c1[,1]) # C1
s12 <- sd(c1[,2]) # C1
s21 <- sd(c2[,1]) # C2
s22 <- sd(c2[,2]) # C2
# Coeficientes de correlação
cr1 <- cor(c1[,1],c1[,2])
cr2 <- cor(c2[,1],c2[,2])
########################################
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
########################################
# Estimando a densidade de C1 e C2 #
ci <- 0
for (i in seqi)
{
cj <- 0
ci<- ci + 1
for (j in seqj)
{
cj <- cj + 1
M1[ci,cj]<-fnormal2var(i,j,m11,m12,s11,s12,cr1)
M2[ci,cj]<-fnormal2var(i,j,m21,m22,s21,s22,cr2)
}
}
# Superfície de separação #
classx<-0.7*(M1 >= M2)
contour2D(M1,seqi,seqj)
par(new=T)
contour2D(M2, seqi,seqj)
persp3D(seqi,seqj,M1,clim=c(0,0.8),colkey=T)
persp3D(seqi,seqj,M2,clim=c(0,0.8),add=T,colkey=T)
persp3D(seqi,seqj,classx,clim=c(1.5,0), zlim=c(0,2),add=T,colkey=F)
plot(c1[,1], c1[,2], col='red', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='x',ylab='y')
par(new=T)
plot(c2[,1], c2[,2], col='blue', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour2D(classx,seqi,seqj)
library('plot3D')
library('MASS')
rm(list=ls())
########################################
# Funções #
fnormal2var <- function(x,y,mx,my,sx,sy,cr){ (1/(2*pi*sx*sy*sqrt(1-cr*cr)))*exp((-0.5*(1-cr*cr))*((((x-mx)^2)/(sx^2))+(((y-my)^2)/(sy^2))-(2*cr*((x-mx)*(y-my))/sy*sx)))}
########################################
# Parâmetros iniciais #
N <- 100
minseq <- 0
maxseq <- 6
########################################
# Gerando dados amostrados das distribuições m1=(2,2)', m2=(4,4)' #
c1 <- matrix(rnorm(N*2),ncol=2)*0.5+c(2,2)
c2 <- matrix(rnorm(N*2),ncol=2)*0.5+c(4,4)
plot(c1[,1], c1[,2], col='red', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='x',ylab='y')
par(new=T)
plot(c2[,1], c2[,2], col='blue', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='',ylab='')
########################################
# Estimando parâmetros das densidades #
# Médias
m11 <- mean(c1[,1]) # C1
m12 <- mean(c1[,2]) # C1
m21 <- mean(c2[,1]) # C2
m22 <- mean(c2[,2]) # C2
# Desvios pradão
s11 <- sd(c1[,1]) # C1
s12 <- sd(c1[,2]) # C1
s21 <- sd(c2[,1]) # C2
s22 <- sd(c2[,2]) # C2
# Coeficientes de correlação
cr1 <- cor(c1[,1],c1[,2])
cr2 <- cor(c2[,1],c2[,2])
########################################
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
########################################
# Estimando a densidade de C1 e C2 #
ci <- 0
for (i in seqi)
{
cj <- 0
ci<- ci + 1
for (j in seqj)
{
cj <- cj + 1
M1[ci,cj]<-fnormal2var(i,j,m11,m12,s11,s12,cr1)
M2[ci,cj]<-fnormal2var(i,j,m21,m22,s21,s22,cr2)
}
}
# Superfície de separação #
classx<-0.7*(M1 >= M2)
contour2D(M1,seqi,seqj)
par(new=T)
contour2D(M2, seqi,seqj)
persp3D(seqi,seqj,M1,clim=c(0,0.8),colkey=T)
persp3D(seqi,seqj,M2,clim=c(0,0.8),add=T,colkey=T)
persp3D(seqi,seqj,classx,clim=c(1.5,0), zlim=c(0,2),add=T,colkey=F)
plot(c1[,1], c1[,2], col='red', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='x',ylab='y')
par(new=T)
plot(c2[,1], c2[,2], col='blue', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour2D(classx,seqi,seqj,col = 'black')
library('plot3D')
library('MASS')
rm(list=ls())
########################################
# Funções #
fnormal2var <- function(x,y,mx,my,sx,sy,cr){ (1/(2*pi*sx*sy*sqrt(1-cr*cr)))*exp((-0.5*(1-cr*cr))*((((x-mx)^2)/(sx^2))+(((y-my)^2)/(sy^2))-(2*cr*((x-mx)*(y-my))/sy*sx)))}
########################################
# Parâmetros iniciais #
N <- 100
minseq <- 0
maxseq <- 6
########################################
# Gerando dados amostrados das distribuições m1=(2,2)', m2=(4,4)' #
c1 <- matrix(rnorm(N*2),ncol=2)*0.5+c(2,2)
c2 <- matrix(rnorm(N*2),ncol=2)*0.5+c(4,4)
plot(c1[,1], c1[,2], col='red', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='x',ylab='y')
par(new=T)
plot(c2[,1], c2[,2], col='blue', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='',ylab='')
########################################
# Estimando parâmetros das densidades #
# Médias
m11 <- mean(c1[,1]) # C1
m12 <- mean(c1[,2]) # C1
m21 <- mean(c2[,1]) # C2
m22 <- mean(c2[,2]) # C2
# Desvios pradão
s11 <- sd(c1[,1]) # C1
s12 <- sd(c1[,2]) # C1
s21 <- sd(c2[,1]) # C2
s22 <- sd(c2[,2]) # C2
# Coeficientes de correlação
cr1 <- cor(c1[,1],c1[,2])
cr2 <- cor(c2[,1],c2[,2])
########################################
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
########################################
# Estimando a densidade de C1 e C2 #
ci <- 0
for (i in seqi)
{
cj <- 0
ci<- ci + 1
for (j in seqj)
{
cj <- cj + 1
M1[ci,cj]<-fnormal2var(i,j,m11,m12,s11,s12,cr1)
M2[ci,cj]<-fnormal2var(i,j,m21,m22,s21,s22,cr2)
}
}
# Superfície de separação #
classx<-0.7*(M1 >= M2)
contour2D(M1,seqi,seqj)
par(new=T)
contour2D(M2, seqi,seqj)
persp3D(seqi,seqj,M1,clim=c(0,0.8),colkey=T)
persp3D(seqi,seqj,M2,clim=c(0,0.8),add=T,colkey=T)
persp3D(seqi,seqj,classx,clim=c(1.5,0), zlim=c(0,2),add=T,colkey=F)
plot(c1[,1], c1[,2], col='red', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='x',ylab='y')
par(new=T)
plot(c2[,1], c2[,2], col='blue', type='p', xlim=c(minseq,maxseq), ylim=c(minseq,maxseq),xlab='',ylab='')
par(new=T)
contour2D(classx,seqi,seqj,col='black')
contour2D(M1,seqi,seqj)
library('plot3D')
library('MASS')
rm(list=ls())
########################################
# Funções #
fnormal2var <- function(x,y,mx,my,sx,sy,cr){
(1/(2*pi*sx*sy*sqrt(1-cr*cr)))*
exp((-0.5*(1-cr*cr))*((((x-mx)^2)/(sx^2))+
(((y-my)^2)/(sy^2))-
(2*cr*((x-mx)*(y-my))/sy*sx)))}
########################################
# Parâmetros iniciais #
N <- 100
minseq <- 0
maxseq <- 6
########################################
# Gerando dados amostrados das distribuições m1=(2,2)', m2=(4,4)' #
c1 <- matrix(rnorm(N*2),ncol=2)*0.5+c(2,2)
c2 <- matrix(rnorm(N*2),ncol=2)*0.5+c(4,4)
plot(c1[,1], c1[,2], col='red', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='x',ylab='y')
par(new=T)
plot(c2[,1], c2[,2], col='blue', type='p', xlim=c(minseq,maxseq),
ylim=c(minseq,maxseq),xlab='',ylab='')
########################################
# Estimando parâmetros das densidades #
# Médias
m11 <- mean(c1[,1]) # C1
m12 <- mean(c1[,2]) # C1
m21 <- mean(c2[,1]) # C2
m22 <- mean(c2[,2]) # C2
# Desvios pradão
s11 <- sd(c1[,1]) # C1
s12 <- sd(c1[,2]) # C1
s21 <- sd(c2[,1]) # C2
s22 <- sd(c2[,2]) # C2
# Coeficientes de correlação
#cr1 <- cor(c1[,1],c1[,2])
#cr2 <- cor(c2[,1],c2[,2])
cr1 <- 0
cr2 <- 0
########################################
seqi <- seq(minseq,maxseq,0.1)
seqj <- seq(minseq,maxseq,0.1)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
########################################
# Estimando a densidade de C1 e C2 #
ci <- 0
for (i in seqi)
{
cj <- 0
ci<- ci + 1
for (j in seqj)
{
cj <- cj + 1
M1[ci,cj]<-fnormal2var(i,j,m11,m12,s11,s12,cr1)
M2[ci,cj]<-fnormal2var(i,j,m21,m22,s21,s22,cr2)
}
}
# Superfície de separação #
classx<-0.7*(M1 >= M2)
########################################
# Gráficos das densidades de probabilidade #
persp3D(seqi,seqj,M1,clim=c(0,0.8),colkey=T,sub='Figura 1: Dados amostrados das distribuições normais')
persp3D(seqi,seqj,M2,clim=c(0,0.8),add=T,colkey=T)
